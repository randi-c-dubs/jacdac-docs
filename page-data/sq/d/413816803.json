{"data":{"allPlainText":{"nodes":[{"content":"<mxfile host=\"Electron\" modified=\"2020-08-04T14:19:38.461Z\" agent=\"5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/12.9.13 Chrome/80.0.3987.163 Electron/8.2.1 Safari/537.36\" etag=\"t0BzEcxsZP97vcOpMLjh\" version=\"12.9.13\" type=\"device\"><diagram id=\"-LvSKuETzAvI5EUrZ2tX\" name=\"Page-1\">7Z1bb6M4FIB/TaTdh1aYO4+97j7MrEbT7uy8rSi4CVoSR47btP31a4hJACcT2uL4JKYjjcDhEs53bDgftIycq+nLHzSeT76SFOcj20pfRs71yLZ9x+b/Fw2vqwY3FA1jmqWrJrRpuMve8KqxWuopS/GisRwjJGfZvNmYkNkMJ6zRFlNKls3FHkne3Ok8HmOp4S6Jc7n1nyxlk1VraAeb9j9xNp5Ue0Z+tPpkGlcLW6uGxSROybLW5NyMnCtKCFtNTV+ucF6ErgrLar3bHZ+uvxjFM9ZlBXp970f3tz/o0rmYTP9F1z/D5zPbXW3mOc6fxBFfxywW35i9VmHgX35eTPLdsSzOv/NQx7Nx8enlcpIxfDePk+LzJc8B3jZh05zPIT75QBgjUz5j8RkqIlV8kOPHapKRuZh6zPL8iuSElrt1Lst/xYrkiWWz8RU/Vkx/8g/PrHOPt6+DWmx9wSj5D9dWt8qfcnUWs4zMxIITQrM3MmNxLhrSjPIjWi2wxAtWNMWLCU7F1xJBwpThl53hR2uovC9gMsWMvvJFxAouEnkg+gHyxfxyk1aBaJrUM6rKn1hk8ni96Q1sPiF4v4O9I6FXgR3tw27J2G/LH7XY0XbsPZAO94O2Dwpa7uN39xff73nTt7+/3N1A6eyph8PU1dLZH/nn4tQT9ZMEyNqfBeigWeAN3V1Jd0cdBnb3oKTDgbQS0muMYPp0tbcBdd+o/S6oD8vaHlgrYe0E0Abw6hiGqkx1VYa8/eyjw7KXu/nNX9fQrtUfwwQnyYlcq9sdkuCw53Vbrs2Hkq2ZBgXxLInzizwbF83TLE3L4+0/P5xOFwMHzY93FHMJJYvFQ0z3pwKHOEvXo+tuWrtPB2uKZ5HVU99shn4d53rot9kUdTKlQ+jHPJLznQcvVHX8UC1uvTcoLcNkB9G5J4Ul3JaRVrVg/zaxQymCZ+lF4eT53IzMcDP7av0Wbc7uOJX8/CZKvwAkx64WGm9LaKo2inOexM/NnW6LltjDN5Lxr1OrERto3Ha8F+SJJlisZNdsfXs7znlU/wkam+UYrdqP54fNvbCYjjGT9lKCXYfkE6w7lCLvYs0XFrN+OfLws1ht/jgzwYnOo2YyBB9NhmJTDthk6HAf4ZQ7/obCx+C2BnNpO6rxyXcHTMQnnxn38jsUIN9sQNUYaLdPrI1BL/jgyIogn2Y7iHwDyCNfBXnktcjboNBHA/ri3KiCfAAZvDuUUVsuij5wdm5t6FD4ZHNvIj6/pyrYh1wFu31XwcfJujV+9jVIQ74wcw0veQUjT8mFmde+MANF3vBquXqYVcmFmdu+MgNFPthPXrX3R60bUSDEvwumSg10dgkjxL/bd1mqSPxrzQRTxL8HplTVg/vIxb8HplTVig+u+PfA1Jd6h1Ml9SVo8e+BqS+1kjdR/HtgCkyt6M0T/16H58pMAH+k4t8Dc5deKz4jxL/XQQUZwNpA8e8NrqvcjHni3wPzQIZW8gaKf7+D5lIt/tu/eQxC/PtQBJJvbQ/eIP776wR2z6zViH+9mWCK+Peh6ClNuI9c/Fc1muH44Ip/H4oK0jycKqkvQYt/H4pF0kveRPHvQ5FKetGbJ/59KE5JM/gjFf8+FDGkF58R4r/6Q1GGszZQ/AeD6yo3Y574r5LdcPIGiv+gg+ZSLf6d9t8/giD+AygCaUVoEP8qO0HfLkqN+NebCaaI/wCKntKE+8jFfwBFMenFB1f8B1BUkObhVEl9CVr8B1Askl7yJor/EIpU0ovePPEfQnFKmsEfqfiv3mNnOD4jxH8I5YknvawNFP/h4LrKzZgn/kMoT2HpJW+g+A87aC7V4t9tvT8QhPgPoQikFaFB/KvsBH27KDXiX28mmCL+Qyh6ShPuIxf/ERTFpBcfXPEfQVFBmodTJfUlaPEf2QP5kZniP4IilfSiN0/8V5eMpoM/UvEfQRFDevEZIf4jKE886WVtoPiPBtdVbsY88R9BeQpLL3kDxX8kay4koWf4hTV5x+IV1En59uvRL95NTfEiexN3BYoXJM+LIymPzbscedfFtp4YWYjc2ZlKn3qjstc8b6MqXepvVA7lrELh7gT61E0FZMl2yjr1qNuB9qjLyun0ol792l4V9erOnr6oy7qnzH8/L+L8QPnUmK2P/YRIINfdi8LZcjJTiELWL7Z1el2ADz3QAi/Xz84JBt6xwGW8XMy6pxj4EFzg5VrSO8HAuz60wCP50vI+m2Le8ts0SyhZ4ITM0sXvelH0McqjZrW2HlDrVzrVcyv12NuWstjLF5hfyDhLeFOOn3GuN+aUMF4ck2Ijxe3xfiBEzfRHMgN/y9XmBxDwWUoIq1e/NJ5PvpIUF0v8Dw==</diagram></mxfile>","parent":{"name":"jacdac-activity","ext":".drawio"}},{"content":"<mxfile host=\"Electron\" modified=\"2020-08-14T11:30:57.032Z\" agent=\"5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/12.9.13 Chrome/80.0.3987.163 Electron/8.2.1 Safari/537.36\" etag=\"ZCs2OvjD7ipumh7gICt4\" version=\"12.9.13\" type=\"device\"><diagram id=\"-LvSKuETzAvI5EUrZ2tX\" name=\"Page-1\">7Z1dc5s4FEB/jWd2H5JBfPOYxk33od1pN9m2bzsEFJsptjxCidP++pUwcgDZNU3BurZwZjIgsDD3XAnpQOKJc714fkfj1fwDSXE+sa30eeJMJ7bt2QH/LQq+bwpcy94UzGiWborQS8Ft9gNvCuVej1mKi8Z+jJCcZatmYUKWS5ywRllMKVk3d3sgefOgq3iGlYLbJM7V0i9Zyuab0lCelSj/C2ezuTwy8qPNlkUsd7Y2BcU8Tsm6VuS8nTjXlBC2WVo8X+NchE6GZfO+mz1btx+M4iXr8gY6vfOju5vPdO1czRf/oenX8OnCdjfVPMX5Y3XG05jF1Sdm32UY+IdfiUV+OJbF+T881PFyJra+Wc8zhm9XcSK2r3kO8LI5W+R8DfHFe8IYWfAVi6/QKlJiQ44f5CIjq2rpIcvza5ITWh7WeVP+iDeSR5YtZ9f8XDH9yjdeWJceL98GVdReMEq+4drbrfJVvp3FLCPLasc5odkPsmRxXhWkGeVntNlhjQsmiuJijtPqY6mxrsL/hCnDz7WiKvbvMFlgRr/zXaqtLqryoGoHyK/W1y9pFVRF83pGyfyJq0yebat+gc0XKt6/wN5R0A+BHR3CbqnYb8rXsNjRbuw9kA4Pg7aPClpt47d3V//c8aKP/76/fQulsaceDlNXS2N/4NurS0/UTxIg63AWoKNmgTc290GaO+rQsbtHJR2OpAchvcUIpk3Lo42o+0btd0F9XNb2yHoQ1k4ArQPfnsM4Kxt4Voa8w+yj47JXm/nbv6fQxuoPYYKT5EzG6naHJDjudd1W5+bjlK2ZBgJvlsT5VZ7NRPEiS9PyfPvPD6fTYOCo+fELk7mEkqK4j+nhVOAQl+m2d91Pa//lYEvxIrJ6apvN0G/jXA/9LpsynEzpEPoZj+Sq+8lv7XV8L2uwfhqUlmGyg+jSU8IS7spIS+7Yv03sMBXBy/RKOHm+tiRL3My+WrtFu6/uP+WB04bIV2NXC423IzSyjOKcJ/FTU//vilZ1hI8k45+vNkdsoHHb8S7II01w9Sa7Zuvb9TiXUf0VNKrlGK3ay/PD5lFYTGeYKUcpwW5D8husO0xFfok137la9cueh1/FauunmQlOdBk1kyF4bTKIqhywydDhPsI5N/wXCq+D2+rMlXqGxqfeHTARn3plPMjvWIB8swHJPtBuX1gbnV7wyp4VQb7MdhD5BpBH/hDkkdcib4NCH43oxbVxCPIBZPDuOI3aMSh6xdW5VdGx8Knm3kR8fk+zYB/yLNjtexZ8mqxb/WdfnTTkgZlr+JRXPts7yMDMaw/MQJE3fLYsH2YdZGDmtkdmoMgHh8kP7f1R60YUCPHv6pqlBqCahBHi3+17WtqP+IeVCaaIf0/XVBUI7hMX/56uqSosfHDFv6drfgkEkLni39M1v4RF3kTx7+maYMJCb5749zo8V2YC+BMV/56uu/Sw8Bkh/r0OKsgA1gaKf290XWU15ol/T9cDGbDIGyj+/Q6aa2jx3/7LYxDi39ckkCQQIE3CCPHv2z2z7kX8A8sEU8S/r0lPQcF94uJfztEMxwdX/PuaVBAUQOaKf1+TRQJG3kTx72uSSsDQmyf+fU1OCRr4ExX/viYxBAyfEeJf/qMow1kbKP6D0XWV1Zgn/mWyG07eQPEfdNBcQ4t/p/3/jyCI/0CTQJJAgDQJI8R/0LeL6kX8A8sEU8R/oElPQcF94uI/0KSYgOGDK/4DTSoICiBzxX+gySIBI2+i+A81SSVg6M0T/6EmpwQN/ImK/9Ae8U0MEf+hpieegLE2UPyHo+sqqzFP/IeansICRt5A8R920FxDi3+39f2BIMR/qEkgSSBAmoQR4j/s20X1Iv6BZYIp4j/UpKeg4D5x8R9pUkzA8MEV/5EmFQQFkLniP7JH8hMzxX+kSSoBQ2+e+JdDRtPBn6j4jzSJIWD4jBD/kaYnnoCxNlD8R6PrKqsxT/xHmp7CAkbeQPEfqZoLKegZfmZN3nH1FdRJ+e3Xk598NzXFRfajugUgviB5Jc6kPDfvzcSbiroeGSmq3OmUSvvuOOy9s+A1r9tIpkv9G5VDNatQuD+BfuumArJUO2Wde9TtQHvUVeV0flGXf7Ynoy67WH1RV3VPmf9+LuJ8T/nSjG3P/YxIINc9iMLZcTEbEIWqX2zr/JoA73qgBV6dPztnGHjHApfx6mTWPcfAh+ACr84lvTMMvOtDCzxSh5Z32QLzkj8WWUJJgROyTIs/9aLoo5dHzdnatkOtj3Tkcyv12NvWYLFXB5jvySxLeFGOn3CuN+aUMD45JqIScXu8HwhRM/2RysDfMdrsA0H+fvoQfY0/ff60+nJze48+Pluriw43lYt5vBKLoi0U97GI8XqeMXy7ihNRvqbxqsmEksdlitNqrWCUfMPXJCe0rNC5uRET9208dzwIp4R4/5jRa90hcNWARrv6E3eggKqD99MKqIsOBzToJ6B8lRLC6n6Gn/n8A0mx2ON/</diagram></mxfile>","parent":{"name":"jacdac-activity-highlight","ext":".drawio"}},{"content":"<mxfile host=\"Electron\" modified=\"2020-08-05T12:24:38.883Z\" agent=\"5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/12.9.13 Chrome/80.0.3987.163 Electron/8.2.1 Safari/537.36\" etag=\"BygZWyy6CGFYbeDQvKey\" version=\"12.9.13\" type=\"device\"><diagram id=\"-LvSKuETzAvI5EUrZ2tX\" name=\"Page-1\">7Z1dc6O4EoZ/jat2LyYFAgRcxvk4ezG7NTXJnrN3p4hRbGqwSWHyMfPrV9jggKTYGEuoY5GpmrIVLMf9tKTuF1k9ca6Wb//Jo6fFn1lM0gmy4reJcz1ByHUR/b9s+LltcJxg2zDPk3jbZL833CW/yLaxetn8OYnJunVdkWVpkTy1G2fZakVmRastyvPstX3ZY5a23/QpmhOu4W4WpXzr/5K4WGxbA+S/t/9Bkvmifmcbh9vfLKP6YmvbsF5EcfbaaHJuJs5VnmXF9tHy7Yqkpelqs2xfd/vBb3d/WE5WRZcXXFmPN8kfP6+/rtD3p9f53yjJki9BBeMlSp+rT1z9tcXP2gT0D38qHxaUL/mVlf1Nn0ieLElB8mb7t/fG6esiKcjdUzQrX/lKr6Bti2KZ0mc2fZhGDySdRrMf8zx7XsVXWZqVXa2yFb1+ui7y7AdhGh+zVVE3TagbbX5oe54VUZFkK9r8xQ6s8sokTRtXTjf/ym63zmVd2D72LUwhOlaIHOwG9JeVHUhekLcPLWzvuFF3Jxn9sPlPekn9gtp4latXtn199xsb423boukzXnVhVPnqfNfzO076oCIqpptf3+Pw/va/+atzuVj+377+J3j54nSHSz9lkUTpdzqGotW8/O0hhA9ZUWTL6klefZwNW/JYPyyyp9LgPJPbzc+G3nORrOZX1MQk/6dkaF14Jat6tFicP9CXW5ufNvzy6SLLk1/UT6L6j4yTnH6i7QWvZF3sQHNUBew/BB1YLc42tjjSyBWArqcC6aBdDvTd/eX3e9r07e+vdzcqqFuHqNs89dgjQeyqpW6JqZezR7W4hHKcwLbcg15gW0N6gTcOdyXD3bYZ0l544XGsHTQk6yPW7ZH1EawRPjyqgyFB7z7CO+nrqIigTOm74Gr4KT2O1gsSV3+WjGHu4g7D3LaHxY84/Dd/XUNb2B+DGZnNzmRhR347jNe/sKMjVvZZnq3XD1GHHGyTee0G0MdQPh7x74lXaEmyfTuy3tm5aXoksL26yLqD6csc9qn7h9+JFdFD3YO11yhMuoF80bwUiDzSqi+Un1pah+1CVvFlKcFMdjl8w/sa49YWT+B7eZC4pdvwtmuYxhOYpm7LSUqd+KWt9oisVb3Dtyyhf9+7v7ajBZe19zp7zmekelFTnGH7cS7C5o/f6pZitBo/HmYEgyLK56Tg3mUDdmeSE1jza9BprOnF1VO8mXnoYtV4/jk9wQkvwrYz+H2doezKAesMHUSlcx747xT6wWUmc64f1fh4qchEfPzKeJDfUICw2YDqObAdg7vMpOf3nFltyMtsB03HAPI2VkHe9hjyCBT6cEQ/2Qlrcsn7kMG7YxolCIp6rM5MR0Ph48VZE/ExmnnvLBhDzoLrjSyGs2bmT1mTNOTAzDU85a0YeUoCM48NzECRNzxbrjfxKQnMXDYyA0XeP0xete6/u/EESfh3dWWpPqghYYTw78pOS+UI/7A8wRTh39OVqgLB/cmFf09XqgoLH1zh39OVXwIBZK7w7+nKL2GRN1H493QlmLDQmyf8ex32lZkA/pMK/56uu/Sw8Bkh/HsdpCADWBso/Huj1rXpxjzh39O1IQMWeQOFf9xB5lIt/CO3HRaBEP6xJgGpBgJkSBgh/GMkmbUU4R+YJ5gi/GNN8hQU3J9c+K9zNMPxwRX+sSYpCAogc4V/rElFAkbeROEfaxKVgKE3T/jHmjQlaOA/qfCPNQlDwPAZIfz7mnY8AWNtoPDvj1rXphvzhP/a2Q0nb6Dw73eQuVQL/w57/hEE4d/XJCDVQIAMCSOEf1+2FiVF+AfmCaYI/74meQoK7k8u/PuaJCZg+OAK/74mKQgKIHOFf1+TigSMvInCf6BJVAKG3jzhP9CkKUED/0mF/wCN+CaGCP+Bph1PwFgbKPwHo9a16cY84T/QtAsLGHkDhf+QT8ZsDn1B3oo27yhN5mXtg9mm1gVtKOX/ZBall9Uvlkkcbypv5GSd/KpuAZR1Ep7KT7L5bN504l2XfT0XWVWdrpsrHV1YwWuv23btLs3CCqLCJqpK09kWnwdZ52515Gu3Op+EnJ/V67v3tdUDrNvqfO6w8X+clnZ+yOmjebH77GdEwnbdgygcwWKmEAUf2iPr/IYAqksGwTE8H185Z2h4xwLn8fxdPPccDR/oM7ywtHIHuc/UCo0nVVlGtRK3C2WFZfosVWX6hLD5BX4swNuhTt9JjuCEjJQ8ZJ0+oRfwscV9siS05bdlUtblI7NsFa9/1zv3SrC87bdVgt1C3irT5/KmV2Z5Xrb7ms2TGW1KyQtJ9Vr8g0KJp82CYXu1ExRKxIIZUBkAHRUqA/TgYLx3lmtNUzI832rH1Xa9eWF/eWBlZu+wQ+tUs7OlXh8J3pR65XDEfvhgyXJvfNjOeEA7d9ivId298SwgD48C945I8DhT497MjgyR2Qf1b5tXCZU7eF3LmAPyEHiuJ8vBa90fyERiH5GuSDI0selE7YsMHWLfibAkQweHDb3LkYcxNZ8sXOoNUMrYvLWuTrfrahtMdctLApOwHbzsZp3mLCMI3NUR4QN3AFpscym4Cm6mtwqJ7HIiMEj4iP4aFJJrP5xafJZcIUmjB5JOo9mP+WYKlA8MeQEwYHwGwMseOoFN69VbEzDsAwPG5w63oICVUcDlh8uQcmAOOgxMdBtRHbAO3+eQrCta77qitU9Rnm7+adEV42i92EWYMlZCl02BBNqWkHso4xuYYvIdvigy3kvoBZvZ7sSzFpCud8fJ53yEzKD6zkEnnqffB2CTb6/8t9dTmFVi+yPJHdh9j7w7CERtZe6ABsjJ99j5wylevprNph/1LvPmnkdBiq7q1q3Dr7QgdwSeZnPme3eidU7RLimx0flFDuQuBalGH3Brmtjo/IpzjkZn9KZ6P54uq3epoTnGc31IMxVTNS/gXepnnls890F09lGcJwW6Cwl6lzqZ4+DuxflgsjYo52E2+Jk+uNkvIWqGjsbBrWZw+6BS7y4lOcfBfTL0AFS41qUY5zi4e3GGFaEdsVlxHNz9ocMK147YKjkO7mM4hwcjNNF9bWWguxywf26jG9JNFGQf9Ichx32XA/vHcd+LM6iIvcth/ec27Idf1BECFbF3Oad/HNy9OIOK2Lucyj8O7tOhg4rYuxzIPw7uPpzZE3c1cx5GdjF9cDuwwrVhNBgDB7cLKkJDao7SZE7L62Sgoc60Zg+4ZfaDdz/GOtx3aF6IL5qH5lkMQHln5omxyj4ns0udEMjQmW/j1MdMHQ0d7z0pUTN0NfVAAGN1Way4J1amo9BTVwtEjE5NLRDA6JhNQXQa3jt0ug/QvQdXax6gagqKAKbMbNiXRnn/UcWaKaspHgKZcnlkuCLQtOugAToABNpVUzECMOiAm7R7Yg0Az9Ku7NgZPFZf0SztA56lXTXnyQOmzFV2kUUZcB7sGhdXM/tx5VHeWxZEL2XPOMoBl/j2LfTDdhUOjM60lAiVA9Jm6PUMowR9aR6IslOfzy07IiugfBo0mEMT+6qQB/rV6wO1vm7QiHYFI1rKqivoWjNc41Le0t5q4Aq61gwXGQcXCe0tHfTet9EM3bQbwGXRNGkBGN+XZpqmaVfIVjY/C7rWDNc0yaosPagKLt+1Zrim3bxHNlI3crmuNcM1TaBC6EDm21uvOtDzwPKVbxxYV6J8xfeld5gGxkkXjrroie9aM1zTpAvkDJLdHngbzdCHOZO5uY3dmnQ7k1njNnbZZzJzVck1f8XcN20HFnLVSdB813qHtC/7juEnv8fkKrrHtL9fzdM6Mm2AY3c/5b4h+P5+NVM2Tpr21IXjfNea4RqnVGN1YibftWa4xinVnjoxk+9aM1zjlGoc8HD7C5h8bwOLlsi00cl9va/3PKt1r2TIy5N1/dVzqgbAfRuh8s6mmuDyvqKsGkDIC4dnWISBPS5Mv9n5HM85Q7PXUxwYs/NJ132yJLTlt2VSVjEis2wVr38HQyKQNO2wFc3risvNWmOCGke2KhEz5BOkr9k8mdGmlLyQVC8ArsqUAiJ2+zsmmAciihnUAeHDJuvtEkBpaNkLcH3OdmV3xM9IzpDVeEI+3zhLuyMrhGX3I+6dKS857/iWdXUlycGZE5FrC+qq9BvydzSu9Hu3yPg9Kv02CUush84g1EzQ7yCJjEfknTxBuu2FSdnRafRpnmVFM3unUBZ/ZjEpr/gX</diagram></mxfile>","parent":{"name":"jacdac-proto-timings","ext":".drawio"}},{"content":"<mxfile host=\"Electron\" modified=\"2020-09-03T11:08:54.202Z\" agent=\"5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/12.9.13 Chrome/80.0.3987.163 Electron/8.2.1 Safari/537.36\" etag=\"OLU_kA0hMEPwsn4xHzou\" version=\"12.9.13\" type=\"device\"><diagram id=\"HprpYEN0h96NzXgQkXMR\" name=\"Page-1\">5Vpdb9sgFP01fuwUfyZ9bOy0a7dp3TJp614qYlMbzTERxkmcXz+wIbGNq7ZrIqPMLzEXuMA5cA+YGLa/3N4QsEq+4AimhjWKtoYdGJZlmiOP/XBLWVsmjlMbYoIiUehgmKMdFMaRsBYognmrIMU4pWjVNoY4y2BIWzZACN60iz3htN3qCsRQMcxDkKrWnyiiiRiFNT7YP0IUJ7Jl07usc5ZAFhYjyRMQ4U3DZM8M2ycY0/ptufVhysGTuNT1rp/J3XeMwIy+pgL2Lx9nj19X61vwMPbvrr75we2F8LIGaSEGfJ+UOWLjF52mpUSC4CKLIHc2MuzpJkEUzlcg5Lkbxj2zJXSZspTJXtXOyZYgoXDbMInO3kC8hJSUrIjIdQRuYuKYnkhvDjSYEtukQYGsBwTz8d7zARz2IvB5A1a2gpWPM0qwflBZQ0PlKFDNIVkjhsC7oIpAnlRleeIJpamPU0wqR/Z19TB7zij5Axs5o+rhNRhdDXv9nISBydAEeAoBCvIwi654gGSpMAU5W/QVeIBQ1dzggGFEyl+crw+uTD4084KtILNOlSL1LMisxRjSl2MUjFqRWqWiAbbbg7W0EZgCitbt+N5HgGjhHiPW4z3T5qhN9Z5r6SLHBQmhqNWMx11H7guOamAUR9V82A/736fI+E1TJMMZfGXc0oQo50g8eS85OjFPE30l2hrpptFy26ihSCtgDa7Sprr7O3OZ7nIwuE6b1hkJ9USr+G95RxIA2xxWAEz14KGNAtiedgrgaqsACljDK4B6TjhzBehyMLwCvG0frrcCyFCliQQ41pEkwBkPLAEaHwJcSzcJkI1pKAEKWINLgPXfHQK6HAwuATLin4cE6HUKcCdHkgDPHlYCLHVfa1heytCaLthLzF/uQBiAkBVaFLnMZI3t85VZxVYMbU8YkKI447OJEQ/Z4pvydcV15kpkLFEU8epTAnO0A4vKFZ8yKz7yCgt3argB91VQnNc3escKn8+d6RqTadIzmawjLN3gYvHpx2Ox+14W3zZBuZt9/v3Uc38WwPfHTh785qJuzz3fe28negS6bwWeDDQ13OkIWvdb0dCoqV8BdESte74aGjX1JlJH1LpbktOhxpKHvxzU2nT444Y9+ws=</diagram></mxfile>","parent":{"name":"jacdac-stack","ext":".drawio"}},{"content":"<mxfile host=\"Electron\" modified=\"2020-08-05T13:01:31.001Z\" agent=\"5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/12.9.13 Chrome/80.0.3987.163 Electron/8.2.1 Safari/537.36\" etag=\"0ecN-Hfsv3d2yfjBnLzk\" version=\"12.9.13\" type=\"device\"><diagram id=\"acCLaWqGyHlhlVS2UljO\" name=\"Page-1\">7Vpdc9o6EP01POKxJH/xGJK0t206k2l6p82jsAX41liMLALk11/JlrBlE0LAgJmpX7DW0sra3XO0WtNDt7PVZ4bn0+80IkkP2tGqh+56EAJge+JHStaFJHCcQjBhcaQ6lYKn+JUooa2kizgimdGRU5rweG4KQ5qmJOSGDDNGl2a3MU3MWed4QhqCpxAnTemvOOJTtQrol/J/SDyZ6pmBNyiezLDurFaSTXFElxURuu+hW0YpL+5mq1uSSONpuxTjPr3xdPNijKR8nwFfMUZfvvpr8Prt4XHkrUY/b771lZaMr/WCSSTWr5qU8Smd0BQn96V0yOgijYjUaotW2eeB0rkQAiH8j3C+Vs7EC06FaMpniXpKVjH/Xbl/lqosV7XuVkpz3ljrRsrZ+ne1URklm+WwvKXHNa2kl0wXLCQ7TINUtGE2IXxHv6DoJ+1WmUD54DOhMyLeR3RgJME8fjHjCqvwnGz6lR4UN8qJH3AoLPS+4GShZnoSK+DSBoskIz0ZJF4i1jMcMXE3kXcR4QI6wqPbYuEBjwSkDf/hJJ6k4j4UNiVMCF4I47HAzI16MIujqAgVksWveJTrk96Y0zjl+ZLdYc+92+qfXXEqJyKr3hbgq0kMbBnmV6P6tgURUr5dG5r2dpBS/igXU2oGjqG0DwamBjoeZyKQ6g7evOLhPkcNnz/EGSdpnE5yymO5V40oqDs6SQShSo8tpzEnT3OcQ2MpOL3m+mxesOw4XkkKGGac0T8baoS7ENdw3ptOApozlS2Ro9rLCgUr0bTCvlrWOqqcvzT5Dv29S5MAdIon3QZmhmtO8ulDImbvMhk6LZKhA90TcGFNaf9sVOhdEqglOJ+r2HwHqCU2n7W+ywLV6RRQ/e0JTT/CHMvzgdihGgkNWYWESJdCD8/kDpaOsvnGeJ3EtNcipvWZS6MPtoJprUZrRefCdNCIgF845tXk5t+bHz/lGTMPiW6nNqhrqc3gAMYMF+wlJ0xwAcIEvTNlNjpjuTbG1KWTCmDuBDL6oyLByRlzyymwJM3OkuSgRZJEwcBMUqDXDk0Cx7JrVAkCSxeMTk+XOmwr7v+R57QFY14RV7pd40oADyDLY/jxoJOfmVDa7/CjweVHkKWzJ1mibnFls3byieEZ6XPaH8ubJk8W/HlJtkyk+iEO/0zyo8stTUQWJCdH4/z6QFlNlwtbqav5HjAZtaXEEwDLMSt2vjUIzsanTiNE7hnTRTXe+WJaPeME3qVZdNAwaNOGaXQjv95IxCQ4y+LQNF1hqUrk2/l1igpYa4xWsbe7xd5adiRavNqeWXdjweRqUOnJLSUcU9GmrRUVdmkoagt28JCaa0tVVn3/oZPIO/H1dsS2tQPvfVxpvRKbDxV4xetKB7Vv7QhUM8AcO9gZkJ57XH/kwlqcFm/85ttZNnB9GPgudJE/qM0tntoO9AF0fMeDtnMYyDzXs9yg1POhSU4NwGsukcM2a+QIumZFDbZD1cACvl25gG/M0g+E+weV62wpjz4KV1z/KNJNkn9AZDQkYkOWh8nrSnw2x8lLJT66BtCBWttBO1wXam06NFvevBrYdP167WFgVbFY+6K1L+E7QHL65oJ2rQZl75zl1IzfrLTfp1Gv/OvIFfxRRGOs2zVCse3XaoSBBc9H7xet+bdQ0zrdR1Lt4POXsfajIQe2QkOgdkp00HkPd3q6HWW3LV8oLl9525eEruJDBWqQUN/zjucg0Sz/1Fp0L/8ajO7/Bw==</diagram></mxfile>","parent":{"name":"jacdac-state-diagram","ext":".drawio"}},{"content":"import { Box } from \"@material-ui/core\"\nimport { AlertTitle } from \"@material-ui/lab\"\nimport { Link } from \"gatsby-theme-material-ui\"\nimport React from \"react\"\nimport FilteredDeviceSpecificationList from \"../components/FilteredDeviceSpecificationList\"\nimport Alert from \"../components/ui/Alert\"\n\nexport default function Page() {\n    return (\n        <>\n            <FilteredDeviceSpecificationList count={20} shuffle={true} />\n            <Box mt={2}>\n                <Alert severity=\"info\">\n                    <AlertTitle>Register your device</AlertTitle>\n                    Known devices are specified in the{\" \"}\n                    <Link to=\"/reference/device-definition/\">\n                        device catalog repository\n                    </Link>\n                    . New devices can be submitted with the{\" \"}\n                    <Link to=\"/tools/device-registration/\">\n                        device registration\n                    </Link>\n                    .\n                </Alert>\n            </Box>\n        </>\n    )\n}\n","parent":{"name":"devices","ext":".tsx"}},{"content":"import React from \"react\"\n\nexport default function Page(props: { location: { pathname: string } }) {\n    const { location } = props\n    const { pathname } = location\n\n    return (\n        <>\n            <h1>404 Not Found</h1>\n            <p>\n                You just hit <code>{pathname}</code> that doesn&#39;t exist...\n                the sadness.\n            </p>\n        </>\n    )\n}\n","parent":{"name":"404","ext":".tsx"}},{"content":"import React from \"react\"\nimport Dashboard from \"../components/dashboard/Dashboard\"\n\nexport default function Page() {\n    return <Dashboard showAvatar={true} showHeader={true} showConnect={true} showStartSimulators={true} />\n}","parent":{"name":"dashboard","ext":".tsx"}},{"content":"import React from \"react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport { Link } from \"gatsby-theme-material-ui\"\n\nfunction ErrorListItem(props: { slug: string; title: string }) {\n    const { slug, title } = props\n    return (\n        <li>\n            <Link to={slug}>{title}</Link>\n        </li>\n    )\n}\n\nexport default function ErrorList() {\n    const data = useStaticQuery(graphql`\n        {\n            allMdx(\n                filter: { slug: { glob: \"errors/**\" } }\n                sort: { fields: slug }\n            ) {\n                nodes {\n                    slug\n                    frontmatter {\n                        title\n                    }\n                }\n            }\n        }\n    `)\n\n    console.log(\"data\", { data })\n    const nodes = data?.allMdx?.nodes?.filter(\n        node => node.slug.indexOf(\"/\") > -1 && node.frontmatter?.title\n    )\n\n    return (\n        <>\n            <h1>Errors</h1>\n            <ol>\n                {nodes?.map(node => (\n                    <ErrorListItem\n                        key={node.slug}\n                        slug={node.slug}\n                        title={node.frontmatter.title}\n                    />\n                ))}\n            </ol>\n        </>\n    )\n}\n","parent":{"name":"errors","ext":".tsx"}},{"content":"import { Link } from \"gatsby-theme-material-ui\"\nimport React from \"react\"\nimport GithubRepositoryList from \"../components/GithubRespositoryList\"\n\nexport default function Page() {\n    return (\n        <>\n            <h1>GitHub Repositories</h1>\n            <p>\n                Jacdac is Open Source on GitHub. Here is a map to help you find\n                the part you want:\n            </p>\n            <h2>Discussions</h2>\n            <p>\n                Post your questions, bugs, suggestions on the centralized\n                discussions at{\" \"}\n                <a href=\"https://github.com/microsoft/jacdac/discussions\">\n                    https://github.com/microsoft/jacdac/discussions\n                </a>\n                .\n            </p>\n            <h2>Specification</h2>\n            <GithubRepositoryList\n                repos={[\"microsoft/jacdac\"]}\n                showDescription={true}\n            />\n            <h2>Module Development</h2>\n\n            <h3>Schematics and C SDK</h3>\n\n            <GithubRepositoryList\n                repos={[\"microsoft/jacdac-ddk\", \"microsoft/jacdac-c\"]}\n                showDescription={true}\n            />\n\n            <h3> Embedded Platforms</h3>\n\n            <GithubRepositoryList\n                repos={[\n                    \"microsoft/jacdac-stm32x0\",\n                    \"microsoft/jacdac-esp32\",\n                    \"microsoft/jacdac-padauk\",\n                ]}\n                showDescription={true}\n            />\n\n            <h2>Embedded Firmware</h2>\n\n            <GithubRepositoryList\n                repos={[\n                    \"microsoft/pxt-jacdac\",\n                    \"microsoft/jacdac-circuitpython\",\n                ]}\n                showDescription={true}\n            />\n\n            <h2>Libraries</h2>\n\n            <GithubRepositoryList\n                repos={[\"microsoft/jacdac-ts\", \"microsoft/jacdac-dotnet\"]}\n                showDescription={true}\n            />\n\n            <h2>Integrations</h2>\n\n            <GithubRepositoryList\n                repos={[\n                    \"microsoft/node-red-contrib-jacdac\",\n                    \"microsoft/jupyter-jacdac\",\n                ]}\n                showDescription={true}\n            />\n\n            <h2>Embedded Tools</h2>\n\n            <GithubRepositoryList\n                repos={[\n                    \"microsoft/pxt-jacdac/tools/multitool\",\n                    \"microsoft/pxt-jacdac/tools/hid-events\",\n                    \"microsoft/pxt-jacdac/devices/microbit\",\n                ]}\n                showDescription={true}\n            />\n\n            <h2> Documentation</h2>\n\n            <GithubRepositoryList\n                repos={[\"microsoft/jacdac-docs\"]}\n                showDescription={true}\n            />\n\n            <h2> Microsoft Open Source Code of Conduct</h2>\n\n            <p>\n                This project is hosted at{\" \"}\n                <Link href=\"https://github.com/microsoft/jacdac-docs\">\n                    https://github.com/microsoft/jacdac-docs\n                </Link>\n                . This project has adopted the{\" \"}\n                <Link href=\"https://opensource.microsoft.com/codeofconduct/\">\n                    Microsoft Open Source Code of Conduct\n                </Link>\n                .\n            </p>\n\n            <h3>Resources</h3>\n            <ul>\n                <li>\n                    <Link href=\"https://opensource.microsoft.com/codeofconduct/\">\n                        Microsoft Open Source Code of Conduct\n                    </Link>\n                </li>\n                <li>\n                    <Link href=\"https://opensource.microsoft.com/codeofconduct/faq/\">\n                        Microsoft Code of Conduct FAQ\n                    </Link>\n                </li>\n                <li>\n                    Contact{\" \"}\n                    <Link href=\"mailto:opencode@microsoft.com\">\n                        opencode@microsoft.com\n                    </Link>{\" \"}\n                    with questions or concerns\n                </li>\n            </ul>\n        </>\n    )\n}\n","parent":{"name":"github","ext":".tsx"}},{"content":"import {\n    Chip,\n    Divider,\n    Grid,\n    InputAdornment,\n    TextField,\n} from \"@material-ui/core\"\nimport React, { useMemo, useState } from \"react\"\nimport ServiceSpecificationList from \"../components/ServiceSpecificationList\"\nimport { useDebounce } from \"use-debounce\"\nimport SearchIcon from \"@material-ui/icons/Search\"\nimport ChipList from \"../components/ui/ChipList\"\nimport {\n    deviceSpecificationsForService,\n    isSensor,\n    serviceSpecifications,\n} from \"../../jacdac-ts/src/jdom/spec\"\nimport { arrayConcatMany, unique } from \"../../jacdac-ts/src/jdom/utils\"\nimport MakeCodeIcon from \"../components/icons/MakeCodeIcon\"\nimport KindIcon from \"../components/KindIcon\"\nimport { serviceProviderDefinitionFromServiceClass } from \"../../jacdac-ts/src/servers/servers\"\nimport JacdacIcon from \"../components/icons/JacdacIcon\"\nimport SpeedIcon from \"@material-ui/icons/Speed\"\nimport {\n    SERVICE_MIXIN_NODE_NAME,\n    VIRTUAL_DEVICE_NODE_NAME,\n} from \"../../jacdac-ts/src/jdom/constants\"\nimport { useId } from \"react-use-id-hook\"\nimport { Link } from \"gatsby-theme-material-ui\"\nimport { resolveMakecodeServiceFromClassIdentifier } from \"../components/makecode/services\"\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\"\nimport { isMixinService } from \"../../jacdac-ts/jacdac-spec/spectool/jdutils\"\n\ninterface ServiceFilter {\n    query: string\n    tag?: string\n    sensors?: boolean\n    makeCode?: boolean\n    mixin?: boolean\n    simulators?: boolean\n    devices?: boolean\n    test?: boolean\n}\n\nfunction FilterChip(props: {\n    label: string\n    value: boolean\n    icon?: JSX.Element\n    onClick: () => void\n}) {\n    const { label, value, icon, onClick } = props\n    const descr = value\n        ? `Disable ${label} filter`\n        : `Filter by ${label} support`\n    return (\n        <Chip\n            label={label}\n            aria-label={descr}\n            title={descr}\n            icon={icon}\n            variant={value ? \"default\" : \"outlined\"}\n            color={value ? \"secondary\" : undefined}\n            onClick={onClick}\n        />\n    )\n}\n\nexport default function ServiceCatalog() {\n    const [filter, setFilter] = useState<ServiceFilter>({\n        query: \"\",\n    })\n    const [deboundedFilter] = useDebounce(filter, 200)\n    const searchId = useId()\n    const { query, tag, makeCode, mixin, simulators, devices, sensors, test } =\n        filter\n    const allTags = useMemo(\n        () =>\n            unique(\n                arrayConcatMany(\n                    serviceSpecifications().map(srv => [srv.group, ...srv.tags])\n                ).filter(t => !!t)\n            ),\n        []\n    )\n    const services = useMemo(() => {\n        const m = query.toLowerCase()\n        let r = serviceSpecifications()\n        if (m) {\n            const filter = (s: string) => s?.toLowerCase().indexOf(m) > -1\n            r = r.filter(srv => filter(srv.name) || filter(srv.notes[\"short\"]))\n        }\n        if (tag) {\n            r = r.filter(srv => srv.group === tag || srv.tags.indexOf(tag) > -1)\n        }\n        if (makeCode)\n            r = r.filter(\n                srv =>\n                    !!resolveMakecodeServiceFromClassIdentifier(\n                        srv.classIdentifier\n                    )\n            )\n        if (mixin) r = r.filter(srv => isMixinService(srv.classIdentifier))\n        if (simulators)\n            r = r.filter(\n                srv =>\n                    !!serviceProviderDefinitionFromServiceClass(\n                        srv.classIdentifier\n                    )\n            )\n        if (devices)\n            r = r.filter(\n                srv =>\n                    !!deviceSpecificationsForService(srv.classIdentifier)\n                        ?.length\n            )\n        if (sensors) r = r.filter(srv => isSensor(srv))\n        return r\n    }, [deboundedFilter])\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setFilter({\n            ...filter,\n            query: event.target.value,\n        })\n    }\n    const handleTagClick = (t: string) => () => {\n        setFilter({ ...filter, tag: tag === t ? \"\" : t })\n    }\n    const handleMakeCodeClick = () =>\n        setFilter({ ...filter, makeCode: !makeCode })\n    const handleMixinClick = () => setFilter({ ...filter, mixin: !mixin })\n    const handleTestClick = () => setFilter({ ...filter, test: !test })\n    const handleSimulatorClick = () =>\n        setFilter({ ...filter, simulators: !simulators })\n    const handleDevicesClick = () => setFilter({ ...filter, devices: !devices })\n    const handleSensorsClick = () => setFilter({ ...filter, sensors: !sensors })\n\n    return (\n        <>\n            <Grid container spacing={1}>\n                <Grid item xs={12}>\n                    <TextField\n                        id={searchId}\n                        margin=\"normal\"\n                        type=\"search\"\n                        variant=\"outlined\"\n                        label=\"Search services\"\n                        aria-label=\"Search services\"\n                        fullWidth={true}\n                        value={query}\n                        onChange={handleChange}\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <SearchIcon />\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <ChipList>\n                        {allTags.map(t => (\n                            <FilterChip\n                                key={t}\n                                label={t}\n                                onClick={handleTagClick(t)}\n                                value={tag === t}\n                            />\n                        ))}\n                        <Divider orientation=\"vertical\" flexItem />\n                        <FilterChip\n                            label=\"Sensors\"\n                            icon={<SpeedIcon />}\n                            value={sensors}\n                            onClick={handleSensorsClick}\n                        />\n                        <FilterChip\n                            label=\"Simulator\"\n                            icon={<KindIcon kind={VIRTUAL_DEVICE_NODE_NAME} />}\n                            value={simulators}\n                            onClick={handleSimulatorClick}\n                        />\n                        <FilterChip\n                            label=\"Devices\"\n                            icon={<JacdacIcon />}\n                            onClick={handleDevicesClick}\n                            value={devices}\n                        />\n                        <FilterChip\n                            label=\"Mixin\"\n                            icon={<KindIcon kind={SERVICE_MIXIN_NODE_NAME} />}\n                            value={mixin}\n                            onClick={handleMixinClick}\n                        />\n                        <FilterChip\n                            label=\"MakeCode\"\n                            icon={<MakeCodeIcon />}\n                            value={makeCode}\n                            onClick={handleMakeCodeClick}\n                        />\n                        <FilterChip\n                            label=\"Test\"\n                            icon={<CheckCircleIcon />}\n                            value={test}\n                            onClick={handleTestClick}\n                        />\n                    </ChipList>\n                </Grid>\n                {!services.length && (\n                    <Grid item>\n                        There are no services matching this request.\n                    </Grid>\n                )}\n                <Grid item xs={12}>\n                    <ServiceSpecificationList\n                        title=\"Stable\"\n                        status={[\"stable\"]}\n                        infrastructure={false}\n                        services={services}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <ServiceSpecificationList\n                        title=\"Experimental\"\n                        status={[\"experimental\"]}\n                        infrastructure={false}\n                        services={services}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <ServiceSpecificationList\n                        title=\"Jacdac\"\n                        infrastructure={true}\n                        services={services}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <ServiceSpecificationList\n                        title=\"Deprecated\"\n                        status={[\"deprecated\"]}\n                        infrastructure={false}\n                        services={services}\n                    />\n                </Grid>\n            </Grid>\n            <h2>See also</h2>\n            <p>\n                Known services are specified in\n                <Link href=\"https://github.com/microsoft/jacdac/tree/main/services\">\n                    https://github.com/microsoft/jacdac/tree/main/services\n                </Link>\n                . Use the{\" \"}\n                <Link href=\"/tools/service-editor/\">\n                    Service Specification Editor\n                </Link>{\" \"}\n                and send us a pull request to register your own service.\n            </p>\n            <ul>\n                <li>\n                    <Link to=\"/devices/\">Devices</Link>\n                </li>\n                <li>\n                    <Link to=\"/tools/service-editor/\">\n                        Service Specification Editor\n                    </Link>\n                </li>\n            </ul>\n        </>\n    )\n}\n","parent":{"name":"services","ext":".tsx"}},{"content":"import React from \"react\"\nimport DSBlockEditor from \"../../components/data-science/DSBlockEditor\"\n\nexport default function Page() {\n    return <DSBlockEditor />\n}\n","parent":{"name":"data","ext":".tsx"}},{"content":"import React from \"react\"\nimport ModelBlockEditor from \"../../components/model-editor/ModelBlockEditor\"\n\nexport default function Page() {\n    return <ModelBlockEditor />\n}\n","parent":{"name":"ml","ext":".tsx"}},{"content":"import React from \"react\"\nimport VMEditor from \"../../components/vm/VMEditor\"\n\nexport default function Page() {\n    return <VMEditor />\n}\n","parent":{"name":"vm","ext":".tsx"}},{"content":"import React, { useEffect, useState } from \"react\"\nimport { JDClient } from \"../../../jacdac-ts/src/jdom/client\"\nimport { CHANGE } from \"../../../jacdac-ts/src/jdom/constants\"\nimport useChange from \"../../jacdac/useChange\"\nimport { Button, Grid } from \"@material-ui/core\"\n\n/**\n * Razor Chroma SDK client\n * Docs: https://assets.razerzone.com/dev_portal/REST/html/index.html\n */\nclass ChromaClient extends JDClient {\n    private connectionInfo: {\n        sessionid: string\n        uri: string\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private heartbeatInterval: any\n    private supported = true\n\n    constructor() {\n        super()\n        this.mount(() => this.stop())\n    }\n\n    get connected() {\n        return !!this.connectionInfo\n    }\n\n    private startHeartbeat() {\n        this.heartbeatInterval = setInterval(() => {\n            if (this.unmounted) clearInterval(this.heartbeatInterval)\n            this.fetch(\"/heartbeat\", \"PUT\")\n        }, 2000)\n    }\n\n    async start() {\n        if (!this.supported || this.connected) return\n\n        console.debug(\"razor: connecting\", { conn: this.connectionInfo })\n        const resp = await fetch(\"https://chromasdk.io:54236/razer/chromasdk\", {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                title: \"Microsoft Jacdac\",\n                description: \"Jacdac interface to Razer\",\n                author: {\n                    name: \"Microsoft\",\n                    contact: \"jacdac@microsoft.com\",\n                },\n                device_supported: [\n                    \"keyboard\",\n                    \"mouse\",\n                    \"headset\",\n                    \"mousepad\",\n                    \"keypad\",\n                    \"chromalink\",\n                ],\n                category: \"application\",\n            }),\n        })\n        console.log({ resp })\n        if (this.unmounted) return\n        if (resp.status === 200) {\n            this.connectionInfo = await resp.json()\n            if (this.unmounted) return\n            this.startHeartbeat()\n            this.emit(CHANGE)\n        } else if (resp.status == 404) {\n            this.supported = false\n            console.log(`razor not supported`)\n            this.emit(CHANGE)\n        }\n    }\n\n    private async stop() {\n        console.debug(\"razor: disconnecting\")\n        if (this.heartbeatInterval) {\n            clearInterval(this.heartbeatInterval)\n            this.heartbeatInterval = undefined\n        }\n        if (this.connectionInfo) {\n            const { uri } = this.connectionInfo\n            this.connectionInfo = undefined\n            try {\n                await fetch(uri, {\n                    method: \"DELETE\",\n                    headers: { \"content-type\": \"application/json\" },\n                })\n            } catch (e) {\n                console.debug(e)\n            }\n        }\n    }\n\n    async startHeadsetEffect(\n        effect: \"none\" | \"custom\" | \"static\",\n        data: number | [number, number, number, number, number]\n    ) {\n        let body: unknown\n        const ceffect = `CHROMA_${effect.toUpperCase()}`\n        if (ceffect === \"CHROMA_NONE\") {\n            body = { effect: ceffect }\n        } else if (ceffect === \"CHROMA_CUSTOM\") {\n            body = { effect: ceffect, param: data }\n        } else if (ceffect === \"CHROMA_STATIC\") {\n            const color = { color: data }\n            body = { effect: ceffect, param: color }\n        }\n        await this.fetch(\"/headset\", \"PUT\", body)\n    }\n\n    private async fetch(path: string, method: string, body?: unknown) {\n        await this.start()\n        if (!this.connected) return\n        try {\n            await fetch(this.connectionInfo.uri + path, {\n                method,\n                body: body && JSON.stringify(body),\n                headers: { \"content-type\": \"application/json\" },\n            })\n        } catch (e) {\n            this.connectionInfo = undefined\n        }\n    }\n}\n\nexport default function Chroma() {\n    const [client] = useState(new ChromaClient())\n    const connected = useChange(client, c => c.connected)\n    // make sure to cleanup\n    useEffect(() => {\n        client.start() // async\n        return () => client.unmount()\n    }, [])\n\n    const handleStatic = (v: number) => async () => {\n        await client.startHeadsetEffect(\"static\", v)\n    }\n    const handleCustom =\n        (v: [number, number, number, number, number]) => async () => {\n            await client.startHeadsetEffect(\"custom\", v)\n        }\n\n    // color: BGR\n\n    return (\n        <Grid container spacing={1}>\n            <Grid item>\n                <div>connected: {connected ? \"connected\" : \"disconnected\"}</div>\n            </Grid>\n            <Grid item>\n                <Button onClick={handleStatic(0xff0000)}>headset 255</Button>\n                <Button onClick={handleStatic(0x00ff00)}>headset 128</Button>\n                <Button onClick={handleStatic(0x0000ff)}>headset 0</Button>\n                <Button onClick={handleCustom([0, 64, 128, 196, 255])}>\n                    headset custom\n                </Button>\n            </Grid>\n        </Grid>\n    )\n}\n","parent":{"name":"razor-chroma","ext":".tsx"}},{"content":"import React, { useEffect, useState } from \"react\"\nimport {\n    REPORT_UPDATE,\n    SRV_ACCELEROMETER,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport { throttle } from \"../../../jacdac-ts/src/jdom/utils\"\nimport useServices from \"../../components/hooks/useServices\"\nimport GridHeader from \"../../components/ui/GridHeader\"\nimport { Button } from \"gatsby-theme-material-ui\"\nimport {\n    Card,\n    CardActions,\n    CardContent,\n    FormControl,\n    FormControlLabel,\n    FormLabel,\n    Grid,\n    Radio,\n    RadioGroup,\n    Typography,\n} from \"@material-ui/core\"\nimport ConnectAlert from \"../../components/alert/ConnectAlert\"\nimport DeviceCardHeader from \"../../components/DeviceCardHeader\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport useBuzzerPlayTone from \"../../components/hooks/useBuzzerPlayTone\"\nimport Dashboard from \"../../components/dashboard/Dashboard\"\nimport JDDevice from \"../../../jacdac-ts/src/jdom/device\"\nimport { useId } from \"react-use-id-hook\"\nimport { LiveMessage } from \"react-aria-live\"\n\nconst TONE_DURATION = 50\nconst TONE_THROTTLE = 100\n\n// this is a React component that gets run numerous time,\n// whenever a change is detected in the React state\n// for example, useServices is a hook that tracks the accelerometer services,\n// so it will render again and update the accelerometers array whenever the bus connects/disconnects\n// an accelerometer\nexport default function AccelerometerTheremin() {\n    const { playTone, toggleBrowserAudio, browserAudio } = useBuzzerPlayTone()\n\n    // identifiers for accessibility\n    const sectionId = useId()\n\n    // useServices accepts a number of filters and returns any services that match\n    // get all accelerometer + buzzer services\n    // under the hood, it uses the bus and events.\n    const accelerometers = useServices({ serviceClass: SRV_ACCELEROMETER })\n\n    // create a state variable to hold the service selected as our accelerometer\n    // when using setAccelService, React will render again this component\n    const [accelService, setAccelService] = useState<JDService>()\n    // used to hold the value for the axis selected by the radio group. This is also used to set the axis of the accelerometer to sonify. Default value is X. meaning the X axis will be sonified by default.\n    const [axisToSonify, setAxisToSonify] = useState<\"x\" | \"y\" | \"z\">(\"x\")\n    //used to hold user selection of the property of the sound to vary. Default is the frequency.\n    const [sonificationProperty, setSonificationProperty] =\n        useState(\"frequency\")\n    const [srAnnouncement, setSRAnnouncement] = useState(\"\")\n\n    // event handeler for radio button selection change for axis to sonify\n    const handleAccessChange = event => {\n        setAxisToSonify(event.target.value)\n        setSRAnnouncement(\n            `changing ${sonificationProperty} based on ${event.target.value} of accelerometer.`\n        ) // using the value that is being set in the previous line results in the value pre-update being announced. I suspect this has to do with how react re-renders. using event.target.value to mittegate this.\n\n        // in progress: make sure an Aria alert gets generated indecating the access that has been selected when streaming starts, or when radio button selection changes.\n    }\n\n    //handler for property selection to sonify.\n    const handelPropertySelectionChange = event => {\n        setSonificationProperty(event.target.value)\n        setSRAnnouncement(\n            `changing ${event.target.value} based on ${axisToSonify} of accelerometer.`\n        )\n    }\n    // use a closure to capture accel variable\n    // act as a toggle for the button the indicates streaming state.\n    const handleSelectAccelerometerService = accel => () => {\n        setSRAnnouncement(\"\") // clearing the live region for the text to be announced when streaming starts. I don't have a good feeling about this approach.\n        accelService == accel\n            ? setAccelService(undefined)\n            : setAccelService(accel)\n        if (accelService !== accel) {\n            setSRAnnouncement(\n                `changing ${sonificationProperty} based on ${axisToSonify} of accelerometer.`\n            ) // to investigate: this announcement does not happen after the user changes the selection of the axis and hits the start streaming button. hitting stop streaming and then start streaming however announces that axis being sonified and the property.\n        } else {\n            setSRAnnouncement(\"\")\n        }\n    }\n\n    // filter to only show accelerometers in dashboard\n    const dashboardDeviceFilter = (d: JDDevice) =>\n        d.hasService(SRV_ACCELEROMETER)\n\n    // register for accelerometer data events\n    useEffect(() => {\n        // ?. checks that the callee is defined\n        const unsubs = accelService?.readingRegister.subscribe(\n            REPORT_UPDATE,\n            // don't trigger more than every 100ms\n            throttle(async () => {\n                // get x acceleration data\n                // const [x] = accelService.readingRegister.unpackedValue\n                // get all acceleration data\n                let volume = 1\n                let toneFrequencyOffset = 0\n                const [x, y, z] = accelService.readingRegister.unpackedValue\n                if (sonificationProperty == \"frequency\") {\n                    if (axisToSonify == \"x\") {\n                        toneFrequencyOffset = x\n                    } else if (axisToSonify == \"y\") {\n                        toneFrequencyOffset = y\n                    } else {\n                        toneFrequencyOffset = z\n                    }\n                } else {\n                    if (axisToSonify == \"x\") {\n                        volume = (Math.abs(x) * 99) / 100.0\n                    } else if (axisToSonify == \"y\") {\n                        volume = (Math.abs(y) * 99) / 100.0\n                    } else {\n                        volume = (Math.abs(z) * 99) / 100.0\n                    }\n                }\n\n                await playTone(\n                    1000 + toneFrequencyOffset * 1000,\n                    TONE_DURATION,\n                    volume\n                )\n            }, TONE_THROTTLE)\n        )\n\n        // cleanup callback\n        return () => unsubs?.()\n    }, [accelService, playTone]) // re-register if accelerometers, buzzers change\n\n    return (\n        <>\n            <section id={sectionId}>\n                <Grid container spacing={2}>\n                    <GridHeader title=\"Audio controls\" />\n                    <Grid item xs={12}>\n                        <Button\n                            variant={\"outlined\"}\n                            onClick={toggleBrowserAudio}\n                        >\n                            {browserAudio\n                                ? \"Stop browser audio\"\n                                : \"Start browser audio\"}\n                        </Button>\n                        <LiveMessage\n                            message={srAnnouncement}\n                            aria-live=\"assertive\"\n                        />\n                    </Grid>\n                    {!accelerometers.length && (\n                        <>\n                            <GridHeader title=\"Connect a device\" />\n                            <Grid item xs>\n                                <ConnectAlert\n                                    serviceClass={SRV_ACCELEROMETER}\n                                />\n                            </Grid>\n                        </>\n                    )}\n                    {!!accelerometers.length && (\n                        <>\n                            <GridHeader title=\"Available accelerometers\" />\n                            {accelerometers.map(accelerometer => (\n                                <Grid\n                                    item\n                                    xs={12}\n                                    sm={6}\n                                    lg={4}\n                                    xl={3}\n                                    key={accelerometer.id}\n                                >\n                                    <Card>\n                                        <DeviceCardHeader\n                                            device={accelerometer.device}\n                                            showAvatar={true}\n                                            showMedia={true}\n                                        />\n                                        <CardContent>\n                                            <Typography variant=\"h5\">\n                                                {(accelerometer === accelService\n                                                    ? \"Streaming from \"\n                                                    : \"\") +\n                                                    (accelerometer.device\n                                                        .isPhysical\n                                                        ? \"Physical \"\n                                                        : \"Virtual \") +\n                                                    `Accelerometer ${accelerometer.friendlyName}`}\n                                            </Typography>\n                                        </CardContent>\n                                        <CardActions>\n                                            <FormControl component=\"fieldset\">\n                                                <FormLabel component=\"legend\">\n                                                    Select axis of the\n                                                    accelerometer to sonify\n                                                </FormLabel>\n                                                <RadioGroup\n                                                    aria-label=\"axis\"\n                                                    name=\"axisToSonify\"\n                                                    value={axisToSonify}\n                                                    onChange={\n                                                        handleAccessChange\n                                                    }\n                                                >\n                                                    <FormControlLabel\n                                                        value=\"x\"\n                                                        control={<Radio />}\n                                                        label=\"X axis\"\n                                                    />\n                                                    <FormControlLabel\n                                                        value=\"y\"\n                                                        control={<Radio />}\n                                                        label=\"Y axis\"\n                                                    />\n                                                    <FormControlLabel\n                                                        value=\"z\"\n                                                        control={<Radio />}\n                                                        label=\"Z axis\"\n                                                    />\n                                                </RadioGroup>\n                                                <FormLabel component=\"legend\">\n                                                    Select property of the sound\n                                                    to change\n                                                </FormLabel>\n                                                <RadioGroup\n                                                    aria-label=\"sonification property\"\n                                                    name=\"soundProperty\"\n                                                    value={sonificationProperty}\n                                                    onChange={\n                                                        handelPropertySelectionChange\n                                                    }\n                                                >\n                                                    <FormControlLabel\n                                                        value=\"frequency\"\n                                                        control={<Radio />}\n                                                        label=\"buzzer frequency\"\n                                                    />\n                                                    <FormControlLabel\n                                                        value=\"volume\"\n                                                        control={<Radio />}\n                                                        label=\"buzzer volume\"\n                                                    />\n                                                </RadioGroup>\n                                            </FormControl>\n\n                                            <Button\n                                                variant={\"outlined\"}\n                                                onClick={handleSelectAccelerometerService(\n                                                    accelerometer\n                                                )}\n                                            >\n                                                {accelerometer === accelService\n                                                    ? \"Stop streaming\"\n                                                    : \"Start streaming\"}\n                                            </Button>\n                                        </CardActions>\n                                    </Card>\n                                </Grid>\n                            ))}\n                        </>\n                    )}\n                </Grid>\n            </section>\n            <Dashboard deviceFilter={dashboardDeviceFilter} />\n        </>\n    )\n}\n","parent":{"name":"accelerometer-theremin","ext":".tsx"}},{"content":"import React, { useState, useContext, useEffect } from \"react\"\n// tslint:disable-next-line: no-submodule-imports\nimport { makeStyles, Theme } from \"@material-ui/core/styles\"\nimport {\n    Grid,\n    Button,\n    TextField,\n    InputAdornment,\n    createStyles,\n    Switch,\n    Card,\n    CardActions,\n} from \"@material-ui/core\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport StopIcon from \"@material-ui/icons/Stop\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport SaveIcon from \"@material-ui/icons/Save\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport HourglassEmptyIcon from \"@material-ui/icons/HourglassEmpty\"\nimport JDBus from \"../../../jacdac-ts/src/jdom/bus\"\nimport FieldDataSet from \"../../components/FieldDataSet\"\nimport Trend from \"../../components/Trend\"\n// tslint:disable-next-line: no-submodule-imports\nimport Alert from \"../../components/ui/Alert\"\nimport SelectEvent from \"../../components/select/SelectEvent\"\nimport JDEvent from \"../../../jacdac-ts/src/jdom/event\"\nimport {\n    EVENT,\n    REPORT_UPDATE,\n    SRV_SENSOR_AGGREGATOR,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport {\n    arrayConcatMany,\n    throttle,\n    uniqueMap,\n} from \"../../../jacdac-ts/src/jdom/utils\"\nimport DataSetGrid from \"../../components/DataSetGrid\"\nimport JDRegister from \"../../../jacdac-ts/src/jdom/register\"\nimport ReadingFieldGrid from \"../../components/ReadingFieldGrid\"\nimport DeviceCardHeader from \"../../components/DeviceCardHeader\"\nimport SensorAggregatorClient from \"../../../jacdac-ts/src/clients/sensoraggregatorclient\"\nimport { Link } from \"gatsby-theme-material-ui\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport ServiceManagerContext from \"../../components/ServiceManagerContext\"\nimport useChartPalette from \"../../components/useChartPalette\"\nimport { isSensor } from \"../../../jacdac-ts/src/jdom/spec\"\nimport useEvents from \"../../components/hooks/useEvents\"\nimport useDevices from \"../../components/hooks/useDevices\"\nimport { useId } from \"react-use-id-hook\"\nimport DashboardDeviceItem from \"../../components/dashboard/DashboardDeviceItem\"\nimport IconButtonWithTooltip from \"../../components/ui/IconButtonWithTooltip\"\nimport AppContext from \"../../components/AppContext\"\nimport AddIcon from \"@material-ui/icons/Add\"\nimport useServices from \"../../components/hooks/useServices\"\nimport { delay } from \"../../../jacdac-ts/src/jdom/utils\"\nimport useLocalStorage from \"../../components/hooks/useLocalStorage\"\nimport FileTabs from \"../../components/fs/FileTabs\"\nimport FileSystemContext from \"../../components/FileSystemContext\"\nimport useChange from \"../../jacdac/useChange\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            marginBottom: theme.spacing(1),\n        },\n        grow: {\n            flexGrow: 1,\n        },\n        field: {\n            marginRight: theme.spacing(1),\n            marginBottom: theme.spacing(1.5),\n        },\n        segment: {\n            marginTop: theme.spacing(2),\n            marginBottom: theme.spacing(2),\n        },\n        row: {\n            marginBottom: theme.spacing(0.5),\n        },\n        buttons: {\n            marginRight: theme.spacing(1),\n            marginBottom: theme.spacing(2),\n        },\n        trend: {\n            width: theme.spacing(10),\n        },\n        vmiddle: {\n            verticalAlign: \"middle\",\n        },\n    })\n)\n\nconst LIVE_HORIZON = 24\nfunction createDataSet(\n    bus: JDBus,\n    registers: JDRegister[],\n    name: string,\n    live: boolean,\n    palette: string[]\n) {\n    const fields = arrayConcatMany(registers.map(reg => reg.fields))\n    const colors = fields.map((f, i) => palette[i % palette.length])\n    const set = new FieldDataSet(bus, name, fields, colors)\n    if (live) set.maxRows = LIVE_HORIZON + 4\n\n    return set\n}\n\nconst COLLECTOR_PREFIX = \"jacdac:collector:prefix\"\nconst COLLECTOR_SAMPLING_INTERVAL = \"jacdac:collector:samplinginterval\"\nconst COLLECTOR_SAMPLING_DURATION = \"jacdac:collector:samplingduration\"\nconst COLLECTOR_START_DELAY = \"jacdac:collector:startdelay\"\n\nexport default function Collector() {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { toggleShowDeviceHostsDialog, enqueueSnackbar } =\n        useContext(AppContext)\n    const classes = useStyles()\n    const { fileSystem } = useContext(FileSystemContext)\n    const root = useChange(fileSystem, _ => _?.root)\n    const { fileStorage } = useContext(ServiceManagerContext)\n    const [registerIdsChecked, setRegisterIdsChecked] = useState<string[]>([])\n    const [aggregatorId, setAggregatorId] = useState<string>(\"\")\n    const [recording, setRecording] = useState(false)\n    const [tables, setTables] = useState<FieldDataSet[]>([])\n    const [, setRecordingLength] = useState(0)\n\n    const [prefix, setPrefix] = useLocalStorage(COLLECTOR_PREFIX, \"data\")\n    const [samplingIntervalDelay, setSamplingIntervalDelay] = useLocalStorage(\n        COLLECTOR_SAMPLING_INTERVAL,\n        100\n    )\n    const [samplingDuration, setSamplingDuration] = useLocalStorage(\n        COLLECTOR_SAMPLING_DURATION,\n        10\n    )\n    const [startDelay, setStartDelay] = useLocalStorage(\n        COLLECTOR_START_DELAY,\n        0\n    )\n\n    const [liveDataSet, setLiveDataSet] = useState<FieldDataSet>(undefined)\n    const [, setLiveDataTimestamp] = useState(0)\n    const [triggerEventId, setTriggerEventId] = useState<string>(\"\")\n    const [countdown, setCountdown] = useState(-1)\n    const starting = countdown > 0\n    const chartPalette = useChartPalette()\n    const devices = useDevices({ ignoreSelf: true, announced: true })\n    const readingRegisters = arrayConcatMany(\n        devices.map(device =>\n            device\n                .services()\n                .filter(srv => isSensor(srv.specification))\n                .map(srv => srv.readingRegister)\n        )\n    )\n    const recordingRegisters = readingRegisters.filter(\n        reg => registerIdsChecked.indexOf(reg.id) > -1\n    )\n    const recordingDevices = uniqueMap(\n        recordingRegisters,\n        reg => reg.service.device.deviceId,\n        reg => reg.service.device\n    )\n    const aggregators: JDService[] = useServices({\n        serviceClass: SRV_SENSOR_AGGREGATOR,\n    })\n    const aggregator: JDService = aggregators.find(\n        srv => srv.id == aggregatorId\n    )\n    const samplingCount = Math.ceil(\n        (samplingDuration * 1000) / samplingIntervalDelay\n    )\n    const triggerEvent = bus.node(triggerEventId) as JDEvent\n    const startEnabled = !starting && !!recordingRegisters?.length\n    const events = useEvents({ ignoreChange: true })\n    const aggregatorsId = useId()\n    const sensorsId = useId()\n    const recordId = useId()\n    const recordingsId = useId()\n    const dashboardId = useId()\n    const samplingIntervalId = useId()\n    const samplingDurationId = useId()\n    const startDelayId = useId()\n    const prefixId = useId()\n\n    useEffect(() => {\n        //console.log(`trigger event`, triggerEventId, triggerEvent)\n        const un = triggerEvent?.subscribe(EVENT, () => {\n            //console.log(`trigger toggle recoring`, recording)\n            toggleRecording()\n        })\n        //console.log(`mounted`, triggerEvent)\n        return () => {\n            //console.log(`unmount trigger`)\n            if (un) un()\n        }\n    }, [triggerEvent, recording, registerIdsChecked, liveDataSet])\n\n    const createSensorConfig = () => ({\n        samplingInterval: samplingIntervalDelay,\n        samplesInWindow: 10,\n        inputs: recordingRegisters.map(reg => ({\n            serviceClass: reg.service.serviceClass,\n        })),\n    })\n    const saveConfig = () => {\n        const sensorConfig = JSON.stringify(createSensorConfig(), null, 2)\n        fileStorage.saveText(\n            `${prefix || \"jacdac\"}-sensor-config.json`,\n            sensorConfig\n        )\n    }\n    const newDataSet = (registerIds: string[], live: boolean) =>\n        registerIds.length\n            ? createDataSet(\n                  bus,\n                  readingRegisters.filter(\n                      reg => registerIds.indexOf(reg.id) > -1\n                  ),\n                  `${prefix || \"data\"}${tables.length}`,\n                  live,\n                  chartPalette\n              )\n            : undefined\n    const handleRegisterCheck = (reg: JDRegister) => {\n        const i = registerIdsChecked.indexOf(reg.id)\n        if (i > -1) registerIdsChecked.splice(i, 1)\n        else registerIdsChecked.push(reg.id)\n        registerIdsChecked.sort()\n        setRegisterIdsChecked([...registerIdsChecked])\n        setLiveDataSet(newDataSet(registerIdsChecked, true))\n    }\n    const stopRecording = () => {\n        if (recording) {\n            if (root) {\n                const csv = liveDataSet.toCSV()\n                // write async\n                const now = new Date()\n                const name = `data-${now.getFullYear()}-${\n                    now.getMonth() + 1\n                }-${now.getDate()}-${now.getHours()}-${now.getMinutes()}-${now.getSeconds()}.csv`\n                root.fileAsync(name, { create: true })\n                    .then(f => f.write(csv))\n            }\n            setTables([liveDataSet, ...tables])\n            setLiveDataSet(newDataSet(registerIdsChecked, true))\n            setRecording(false)\n\n            enqueueSnackbar(`recording stopped`)\n        }\n    }\n    const startRecording = async () => {\n        if (!starting && !recording && recordingRegisters.length) {\n            // do countdown\n            if (startDelay > 0) {\n                let countdown = Math.ceil(startDelay)\n                while (countdown > 0) {\n                    setCountdown(countdown)\n                    await delay(1000)\n                    countdown--\n                }\n            }\n            setCountdown(-1)\n            setLiveDataSet(newDataSet(registerIdsChecked, false))\n            setRecording(true)\n            if (aggregator) {\n                const client = new SensorAggregatorClient(aggregator)\n                await client.setInputs(createSensorConfig())\n                client.collect(samplingCount)\n            }\n            enqueueSnackbar(`recording started`)\n        }\n    }\n    const startStreamingRegisters = () => {\n        console.log(`start streaming`)\n        const streamers = recordingRegisters?.map(reg =>\n            reg.subscribe(REPORT_UPDATE, () => {})\n        )\n        return () => {\n            console.log(`stop streaming`)\n            streamers.map(streamer => streamer())\n        }\n    }\n    const toggleRecording = () => {\n        if (recording) stopRecording()\n        else startRecording()\n    }\n    const handleSamplingIntervalChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        const v = parseInt(event.target.value)\n        if (!isNaN(v)) setSamplingIntervalDelay(v)\n    }\n    const handleSamplingDurationChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        const v = parseInt(event.target.value)\n        if (!isNaN(v)) setSamplingDuration(v)\n    }\n    const handleStartDelayChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        const v = parseInt(event.target.value)\n        if (!isNaN(v)) setStartDelay(v)\n    }\n    const handlePrefixChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setPrefix(event.target.value.trim())\n    }\n    const handleTriggerChange = (eventId: string) => setTriggerEventId(eventId)\n    const handleDeleteTable = (table: FieldDataSet) => {\n        const i = tables.indexOf(table)\n        if (i > -1) {\n            tables.splice(i, 1)\n            setTables([...tables])\n        }\n    }\n    const handleAggregatorChecked = (srv: JDService) => () => {\n        const id = srv?.id == aggregatorId ? \"\" : srv?.id\n        setAggregatorId(id)\n    }\n    const updateLiveData = () => {\n        setLiveDataSet(liveDataSet)\n        setRecordingLength(liveDataSet.rows.length)\n        setLiveDataTimestamp(bus.timestamp)\n    }\n    const throttleUpdate = throttle(() => updateLiveData(), 30)\n    // data collection\n    // interval add data entry\n    const addRow = (values?: number[]) => {\n        if (!liveDataSet) return\n        //console.log(values)\n        liveDataSet.addRow(values)\n        if (recording && liveDataSet.length >= samplingCount) {\n            // stop recording\n            updateLiveData()\n            stopRecording()\n        } else {\n            throttleUpdate()\n        }\n    }\n    // setting interval\n    useEffect(() => {\n        console.log(`set interval to ${samplingIntervalDelay}`)\n        recordingRegisters.forEach(reg =>\n            reg.sendSetPackedAsync(\"i32\", [samplingIntervalDelay])\n        )\n    }, [samplingIntervalDelay, registerIdsChecked])\n    // collecting\n    useEffect(() => {\n        if (aggregator && recording) return undefined\n        const interval = setInterval(() => addRow(), samplingIntervalDelay)\n        const stopStreaming = startStreamingRegisters()\n        return () => {\n            clearInterval(interval)\n            stopStreaming()\n        }\n    }, [\n        recording,\n        samplingIntervalDelay,\n        samplingCount,\n        registerIdsChecked,\n        aggregator,\n    ])\n    useEffect(() => {\n        if (aggregator) {\n            const client = new SensorAggregatorClient(aggregator)\n            return client.subscribeSample(values => addRow(values))\n        }\n        return () => {}\n    }, [recording, liveDataSet, registerIdsChecked, aggregator])\n\n    return (\n        <div className={classes.root}>\n            <h1>Data Collector</h1>\n            <p>\n                Use this page to collect streaming data from Jacdac devices into\n                various output formats.\n            </p>\n            {!!aggregators.length && (\n                <section id={aggregatorsId}>\n                    <h3>(Optional) Choose a data aggregator</h3>\n                    <p>\n                        A <Link to=\"/services/aggregator\">data aggregator</Link>{\" \"}\n                        service collects collects sensor data on the bus and\n                        returns an aggregated at regular intervals.\n                    </p>\n                    <Grid container spacing={1}>\n                        {aggregators.map(aggregator => (\n                            <Grid key={aggregator.id} item xs={4}>\n                                <Card>\n                                    <DeviceCardHeader\n                                        device={aggregator.device}\n                                        showAvatar={true}\n                                    />\n                                    <CardActions>\n                                        <Switch\n                                            checked={\n                                                aggregatorId == aggregator.id\n                                            }\n                                            disabled={recording}\n                                            onChange={handleAggregatorChecked(\n                                                aggregator\n                                            )}\n                                        />\n                                    </CardActions>\n                                </Card>\n                            </Grid>\n                        ))}\n                    </Grid>\n                </section>\n            )}\n            <section id={sensorsId}>\n                <h3>\n                    Choose sensors &nbsp;\n                    <IconButtonWithTooltip\n                        title=\"start simulator\"\n                        onClick={toggleShowDeviceHostsDialog}\n                    >\n                        <AddIcon />\n                    </IconButtonWithTooltip>\n                </h3>\n                {!readingRegisters.length && (\n                    <Alert className={classes.grow} severity=\"info\">\n                        Waiting for sensor...\n                    </Alert>\n                )}\n                {!!readingRegisters.length && (\n                    <ReadingFieldGrid\n                        readingRegisters={readingRegisters}\n                        registerIdsChecked={registerIdsChecked}\n                        recording={recording}\n                        liveDataSet={liveDataSet}\n                        handleRegisterCheck={handleRegisterCheck}\n                    />\n                )}\n            </section>\n            <section id={recordId}>\n                <h3>Record data</h3>\n                {aggregator && (\n                    <p>\n                        Record the sensor input configuration in order to up\n                        your ML model later on.\n                    </p>\n                )}\n                <div className={classes.buttons}>\n                    <Button\n                        size=\"large\"\n                        variant=\"contained\"\n                        color={recording ? \"secondary\" : \"primary\"}\n                        title={\n                            starting\n                                ? `starting in ${countdown}`\n                                : recording\n                                ? \"stop recording\"\n                                : \"start recording\"\n                        }\n                        onClick={toggleRecording}\n                        startIcon={\n                            starting ? (\n                                <HourglassEmptyIcon />\n                            ) : recording ? (\n                                <StopIcon />\n                            ) : (\n                                <PlayArrowIcon />\n                            )\n                        }\n                        disabled={!startEnabled}\n                    >\n                        {starting\n                            ? countdown + \"\"\n                            : recording\n                            ? \"Stop\"\n                            : \"Start\"}\n                    </Button>\n                    {aggregator && (\n                        <Button\n                            variant=\"contained\"\n                            title=\"save sensor input configuration\"\n                            onClick={saveConfig}\n                            startIcon={<SaveIcon />}\n                            disabled={recording}\n                        >\n                            Save configuration\n                        </Button>\n                    )}\n                </div>\n                <div className={classes.row}>\n                    <TextField\n                        id={samplingIntervalId}\n                        className={classes.field}\n                        disabled={recording}\n                        type=\"number\"\n                        label=\"Sampling interval\"\n                        value={samplingIntervalDelay}\n                        variant=\"outlined\"\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    ms\n                                </InputAdornment>\n                            ),\n                        }}\n                        onChange={handleSamplingIntervalChange}\n                    />\n                    <TextField\n                        id={samplingDurationId}\n                        className={classes.field}\n                        type=\"number\"\n                        disabled={recording}\n                        label=\"Sampling duration\"\n                        value={samplingDuration}\n                        variant=\"outlined\"\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    s\n                                </InputAdornment>\n                            ),\n                        }}\n                        onChange={handleSamplingDurationChange}\n                    />\n                    <TextField\n                        id={startDelayId}\n                        className={classes.field}\n                        type=\"number\"\n                        disabled={recording}\n                        label=\"Start delay\"\n                        value={startDelay}\n                        variant=\"outlined\"\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    s\n                                </InputAdornment>\n                            ),\n                        }}\n                        onChange={handleStartDelayChange}\n                    />\n                    <TextField\n                        id={prefixId}\n                        className={classes.field}\n                        disabled={recording}\n                        label=\"File name prefix\"\n                        value={prefix}\n                        variant=\"outlined\"\n                        onChange={handlePrefixChange}\n                    />\n                    <SelectEvent\n                        events={events}\n                        eventId={triggerEventId}\n                        onChange={handleTriggerChange}\n                        label={\"Start Event\"}\n                        friendlyName={true}\n                    />\n                </div>\n            </section>\n            {!!recordingDevices?.length && (\n                <section id={dashboardId}>\n                    <Grid container spacing={1}>\n                        {recordingDevices?.map(device => (\n                            <DashboardDeviceItem\n                                key={device.id}\n                                device={device}\n                                showAvatar={true}\n                                showHeader={true}\n                            />\n                        ))}\n                    </Grid>\n                </section>\n            )}\n            {liveDataSet && (\n                <Trend\n                    key=\"trends\"\n                    height={12}\n                    dataSet={liveDataSet}\n                    horizon={LIVE_HORIZON}\n                    dot={true}\n                    gradient={true}\n                />\n            )}\n            <FileTabs hideFiles={true} hideDirectories={true} />\n            {!!tables.length && (\n                <section id={recordingsId}>\n                    <h3>Recordings</h3>\n                    <DataSetGrid\n                        tables={tables}\n                        handleDeleteTable={handleDeleteTable}\n                    />\n                </section>\n            )}\n        </div>\n    )\n\n    //{liveDataSet && <DataSetTable key=\"datasettable\" className={classes.segment} dataSet={liveDataSet} maxRows={3} minRows={3} />}\n}\n","parent":{"name":"collector","ext":".tsx"}},{"content":"import React, { useState, useContext, useEffect, useCallback } from \"react\"\n// tslint:disable-next-line: no-submodule-imports\nimport { Grid, Button, TextField } from \"@material-ui/core\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport SaveIcon from \"@material-ui/icons/Save\"\nimport CheckCircle from \"@material-ui/icons/CheckCircle\"\nimport CancelIcon from \"@material-ui/icons/Cancel\"\n// tslint:disable-next-line: no-submodule-imports\nimport useDevices from \"../../components/hooks/useDevices\"\nimport {\n    PACKET_RECEIVE,\n    SRV_CONTROL,\n    SRV_LED_PIXEL,\n    SRV_LED,\n    SRV_ROLE_MANAGER,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport Packet from \"../../../jacdac-ts/src/jdom/packet\"\n// tslint:disable-next-line: no-submodule-imports\nimport Table from \"@material-ui/core/Table\"\n// tslint:disable-next-line: no-submodule-imports\nimport TableBody from \"@material-ui/core/TableBody\"\n// tslint:disable-next-line: no-submodule-imports\nimport TableCell from \"@material-ui/core/TableCell\"\n// tslint:disable-next-line: no-submodule-imports\nimport TableContainer from \"@material-ui/core/TableContainer\"\n// tslint:disable-next-line: no-submodule-imports\nimport TableHead from \"@material-ui/core/TableHead\"\n// tslint:disable-next-line: no-submodule-imports\nimport TableRow from \"@material-ui/core/TableRow\"\n// tslint:disable-next-line: no-submodule-imports\nimport Paper from \"@material-ui/core/Paper\"\nimport GridHeader from \"../../components/ui/GridHeader\"\nimport Dashboard from \"../../components/dashboard/Dashboard\"\nimport ServiceManagerContext from \"../../components/ServiceManagerContext\"\nimport useEffectAsync from \"../../components/useEffectAsync\"\nimport { delay } from \"../../../jacdac-ts/src/jdom/utils\"\nimport { dependencyId } from \"../../../jacdac-ts/src/jdom/eventsource\"\nimport JDDevice from \"../../../jacdac-ts/src/jdom/device\"\nimport { lightEncode } from \"../../../jacdac-ts/src/jdom/light\"\nimport { LedPixelCmd, LedCmd } from \"../../../jacdac-ts/src/jdom/constants\"\nimport { createStyles, makeStyles } from \"@material-ui/core\"\nimport { jdpack } from \"../../../jacdac-ts/src/jdom/pack\"\nimport FileSystemContext from \"../../components/FileSystemContext\"\nimport FileTabs from \"../../components/fs/FileTabs\"\nimport useChange from \"../../jacdac/useChange\"\nimport AppContext from \"../../components/AppContext\"\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        buttonFail: {\n            color: \"white\",\n            backgroundColor: \"red\",\n        },\n        buttonSuccess: {\n            color: \"white\",\n            backgroundColor: \"green\",\n        },\n    })\n)\n\ninterface ServiceDescriptor {\n    name: string\n    serviceClass: number\n    serviceIndex: number\n}\n\ninterface DeviceDescriptor {\n    brain: boolean\n    deviceIdentifier: string\n    productIdentifier: number\n    services: ServiceDescriptor[]\n    servicesSeen: ServiceDescriptor[]\n    pass: boolean\n    comment: string\n}\n\ninterface DeviceDescriptorTable {\n    descriptors: DeviceDescriptor[]\n    headers: string[]\n}\n\nfunction serviceArrayMatched(descriptor: DeviceDescriptor) {\n    let matched = true\n    descriptor.services.forEach(service => {\n        const srv = descriptor.servicesSeen.filter(srv => {\n            return (\n                srv.serviceClass == service.serviceClass &&\n                srv.serviceIndex == service.serviceIndex\n            )\n        })\n        if (srv.length == 0) matched = false\n    })\n    return matched\n}\n\nfunction dateString() {\n    const date = new Date()\n    return date.toDateString().replace(/ /g, \"-\")\n}\n\nfunction isBrain(d: JDDevice) {\n    return !!d?.hasService(SRV_ROLE_MANAGER)\n}\n\nfunction DataSetTable(props: {\n    dataSet: DeviceDescriptorTable\n    updateDescriptor: (DeviceDescriptor) => void\n    className?: string\n}) {\n    const classes = useStyles()\n    const { dataSet, updateDescriptor } = props\n    const { descriptors, headers } = dataSet\n\n    const setPass =\n        (deviceDescriptor: DeviceDescriptor, state: boolean) => () => {\n            deviceDescriptor.pass = state\n            updateDescriptor(deviceDescriptor)\n        }\n\n    const handleCommentChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        const descriptor = descriptors.find(\n            d => d.deviceIdentifier == event.target.id\n        )\n        descriptor.comment = event.target.value\n        updateDescriptor(descriptor)\n    }\n\n    return (\n        <TableContainer component={Paper}>\n            <Table aria-label=\"device table\" size=\"small\">\n                <TableHead>\n                    <TableRow>\n                        {headers.map(header => (\n                            <TableCell align=\"right\" key={header}>\n                                {header}\n                            </TableCell>\n                        ))}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {descriptors?.map(descriptor => (\n                        <TableRow key={descriptor.deviceIdentifier}>\n                            <TableCell align=\"center\">\n                                {descriptor.deviceIdentifier}\n                            </TableCell>\n                            <TableCell align=\"center\">\n                                {descriptor.productIdentifier &&\n                                    descriptor.productIdentifier.toString(16)}\n                                {descriptor.services.filter(service => {\n                                    return (\n                                        service.serviceClass == SRV_ROLE_MANAGER\n                                    )\n                                })?.length && \"BRAIN\"}\n                            </TableCell>\n                            <TableCell align=\"center\">\n                                {descriptor.services.map(\n                                    service => service.name + \" \"\n                                )}\n                            </TableCell>\n                            <TableCell align=\"center\">\n                                {descriptor.servicesSeen.map(\n                                    service => service.name + \" \"\n                                )}\n                            </TableCell>\n                            <TableCell align=\"center\">\n                                {serviceArrayMatched(descriptor) && (\n                                    <span style={{ color: \"green\" }}>\n                                        <CheckCircle fontSize=\"small\" />\n                                        PASS\n                                    </span>\n                                )}\n                            </TableCell>\n                            <TableCell align=\"center\">\n                                {descriptor.pass && (\n                                    <Button\n                                        aria-label=\"Toggle pass state\"\n                                        variant=\"contained\"\n                                        className={classes.buttonSuccess}\n                                        onClick={setPass(descriptor, false)}\n                                        startIcon={\n                                            <CheckCircle fontSize=\"small\" />\n                                        }\n                                    >\n                                        Pass\n                                    </Button>\n                                )}\n                                {!descriptor.pass && (\n                                    <Button\n                                        aria-label=\"Toggle pass state\"\n                                        variant=\"contained\"\n                                        className={classes.buttonFail}\n                                        onClick={setPass(descriptor, true)}\n                                        startIcon={\n                                            <CancelIcon fontSize=\"small\" />\n                                        }\n                                    >\n                                        FAIL\n                                    </Button>\n                                )}\n                            </TableCell>\n                            <TableCell align=\"center\">\n                                <TextField\n                                    onChange={handleCommentChange}\n                                    id={descriptor.deviceIdentifier}\n                                    label=\"Comment\"\n                                    fullWidth\n                                    value={descriptor.comment}\n                                />\n                            </TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    )\n}\n\nasync function LEDTest(service: JDService) {\n    while (service.device.connected) {\n        for (let i = 0; i < 8; i++) {\n            const encoded = lightEncode(\n                `setone % #\n                    show 20`,\n                [i, 0xff0000]\n            )\n\n            if (service.device.connected)\n                await service?.sendCmdAsync(LedPixelCmd.Run, encoded)\n            await delay(200)\n        }\n    }\n}\n\nasync function SingleRGBLEDTest(service: JDService) {\n    const pack = (r, g, b, animDelay) => {\n        const unpacked: [number, number, number, number] = [r, g, b, animDelay]\n        return jdpack(\"u8 u8 u8 u8\", unpacked)\n    }\n\n    while (service.device.connected) {\n        await service.sendCmdAsync(LedCmd.Animate, pack(255, 0, 0, 200))\n        await delay(500)\n        await service.sendCmdAsync(LedCmd.Animate, pack(0, 255, 0, 200))\n        await delay(500)\n        await service.sendCmdAsync(LedCmd.Animate, pack(0, 0, 255, 200))\n        await delay(500)\n    }\n}\n\nasync function StatusLEDTest(device: JDDevice) {\n    const l = device.statusLight\n    while (device.connected) {\n        l.blink(0xff0000, 0x000000, 250, 3)\n        await delay(1000)\n        l.blink(0x00ff00, 0x000000, 250, 3)\n        await delay(1000)\n        l.blink(0x0000ff, 0x000000, 250, 3)\n        await delay(1000)\n    }\n}\n\nexport default function Commissioner() {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { setError, enqueueSnackbar } = useContext(AppContext)\n    const { fileSystem } = useContext(FileSystemContext)\n    const workingFile = useChange(fileSystem, _ => _?.workingFile)\n    const [filterBrains, setFilterBrains] = useState<boolean>(true)\n    const devices = useDevices({\n        announced: true,\n        ignoreSelf: true,\n        ignoreSimulators: true,\n    }).filter(d => !filterBrains || !isBrain(d))\n    const [title, setTitle] = useState(\"\")\n    const [dataSet, setDataSet] = useState<DeviceDescriptor[]>()\n    const tableHeaders = [\n        \"Device identifier\",\n        \"Product identifier\",\n        \"Services advertised\",\n        \"Services seen\",\n        \"Packets seen\",\n        \"Functional test pass\",\n        \"Comment\",\n    ]\n    const { fileStorage } = useContext(ServiceManagerContext)\n\n    const testDevice = async (d: JDDevice) => {\n        StatusLEDTest(d)\n        for (const srv of d.services()) {\n            switch (srv.serviceClass) {\n                case SRV_LED_PIXEL:\n                    LEDTest(srv)\n                    break\n                case SRV_LED:\n                    SingleRGBLEDTest(srv)\n                    break\n            }\n        }\n    }\n\n    // file handling\n    useEffectAsync(async () => {\n        if (!workingFile) return\n\n        try {\n            const text = await workingFile.textAsync()\n            const newDataSet = JSON.parse(text)\n            console.debug(newDataSet)\n            enqueueSnackbar(`${workingFile.name} loaded...`)\n        } catch (e) {\n            setError(e)\n        }\n    }, [workingFile])\n\n    useEffectAsync(async () => {\n        const newDataSet = (dataSet?.slice(0) || []).filter(\n            d => !filterBrains || !d.brain\n        )\n\n        for (const d of devices) {\n            if (\n                newDataSet.filter(entry => entry.deviceIdentifier == d.deviceId)\n                    ?.length\n            )\n                continue\n\n            const services = []\n            d.services()\n                .filter(service => {\n                    return service.serviceClass != SRV_CONTROL\n                })\n                .forEach((s: JDService) => {\n                    services.push({\n                        name: s.name,\n                        serviceClass: s.serviceClass,\n                        serviceIndex: s.serviceIndex,\n                    })\n                })\n            newDataSet.push({\n                brain: isBrain(d),\n                deviceIdentifier: d.deviceId,\n                productIdentifier: await d.resolveProductIdentifier(3),\n                services,\n                servicesSeen: [],\n                pass: true,\n                comment: \"\",\n            })\n            // launch tests\n            testDevice(d)\n        }\n        setDataSet(newDataSet)\n    }, [dependencyId(devices), filterBrains])\n\n    const table = {\n        headers: tableHeaders,\n        descriptors: dataSet,\n    }\n\n    const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.target.value)\n    }\n\n    useEffect(\n        () =>\n            bus.subscribe(PACKET_RECEIVE, (packet: Packet) => {\n                const newDataSet = dataSet?.slice(0) || []\n                const contains = newDataSet\n                    .find(\n                        descriptor =>\n                            descriptor.deviceIdentifier ==\n                            packet.deviceIdentifier\n                    )\n                    .servicesSeen.filter(\n                        service =>\n                            service.serviceClass == packet.serviceClass &&\n                            service.serviceIndex == packet.serviceIndex\n                    )\n\n                if (contains.length) return\n\n                newDataSet\n                    .find(\n                        descriptor =>\n                            descriptor.deviceIdentifier ==\n                            packet.deviceIdentifier\n                    )\n                    ?.servicesSeen.push({\n                        name: packet.friendlyServiceName,\n                        serviceClass: packet.serviceClass,\n                        serviceIndex: packet.serviceIndex,\n                    })\n                setDataSet(newDataSet)\n            }),\n        [bus, dataSet]\n    )\n\n    const renderCSV = () => {\n        const sep = \",\"\n        const lineEnding = \"\\r\\n\"\n        let str =\n            \"device identifier\" +\n            sep +\n            \"product identifier\" +\n            sep +\n            \"services\" +\n            sep +\n            \"Packets seen\" +\n            sep +\n            \"Functional test pass\" +\n            sep +\n            \"Comment\" +\n            lineEnding\n        dataSet.forEach(descriptor => {\n            str += `0x${descriptor.deviceIdentifier}${sep}`\n            if (descriptor.productIdentifier)\n                str += `0x${descriptor.productIdentifier.toString(16)}${sep}`\n            else if (\n                descriptor.services.find(\n                    service => service.serviceClass == SRV_ROLE_MANAGER\n                )\n            )\n                str += `BRAIN${sep}`\n            else str += `UNKNOWN${sep}`\n\n            str += `${descriptor.services\n                .map(service => service.name)\n                .join(\" \")}${sep}`\n\n            if (serviceArrayMatched(descriptor)) str += `YES${sep}`\n            else str += `NO${sep}`\n\n            if (descriptor.pass) str += `PASS${sep}`\n            else str += `FAIL${sep}`\n\n            str += descriptor.comment + lineEnding\n        })\n        return str\n    }\n\n    useEffectAsync(async () => {\n        if (!workingFile || !dataSet) return\n\n        // save JSON\n        await workingFile.write(JSON.stringify(dataSet))\n        const csvFile = await workingFile.parentDirectory.fileAsync(\n            workingFile.name.replace(/\\.json$/i, \".csv\"),\n            { create: true }\n        )\n        await csvFile.write(renderCSV())\n        // generate CSV\n    }, [workingFile, dataSet])\n\n    const handleOnClearClick = () => {\n        setDataSet(undefined)\n    }\n    const handleDownloadCSV = async () => {\n        const str = renderCSV()\n        const fileTitle = title.length ? `${title}-` : \"\"\n        fileStorage.saveText(\n            `${fileTitle}commissioning-${dateString()}.csv`,\n            str\n        )\n    }\n\n    const handleFilterBrains = () => setFilterBrains(!filterBrains)\n    const deviceFilter = useCallback(\n        d => !filterBrains || !isBrain(d),\n        [filterBrains]\n    )\n\n    const handleUpdateDescriptor = descriptor => {\n        const newDataSet = dataSet?.slice(0) || []\n        const el = newDataSet.find(\n            d => d.deviceIdentifier == descriptor.deviceIdentifier\n        )\n        if (el) {\n            el.comment = descriptor.comment\n            el.pass = descriptor.pass\n            setDataSet(newDataSet)\n        }\n    }\n    const fileFilter = (f: string) => /\\.json$/i.test(f)\n\n    return (\n        <>\n            <h1>Commissioner</h1>\n            <Dashboard\n                hideSimulators={true}\n                showAvatar={true}\n                showHeader={true}\n                showConnect={true}\n                showStartSimulators={false}\n                deviceFilter={deviceFilter}\n            />\n            <Grid container spacing={1}>\n                <GridHeader title={\"Commissioning data\"} />\n                <Grid item xs={12}>\n                    <FileTabs\n                        hideDirectories={true}\n                        fileFilter={fileFilter}\n                        newFileContent={\"[]\"}\n                        newFileExtension=\"json\"\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container spacing={1}>\n                        <Grid item>\n                            <Button\n                                aria-label=\"Clear data\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={handleOnClearClick}\n                            >\n                                Clear\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button\n                                aria-label={\"Download data\"}\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                onClick={handleDownloadCSV}\n                                startIcon={<SaveIcon />}\n                            >\n                                Download CSV\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button\n                                aria-label=\"Clear data\"\n                                variant=\"contained\"\n                                onClick={handleFilterBrains}\n                            >\n                                {filterBrains ? \"Show brains\" : \"Hide brains\"}\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                onChange={handleTitleChange}\n                                label=\"Title\"\n                                fullWidth\n                                value={title}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <DataSetTable\n                        dataSet={table}\n                        updateDescriptor={handleUpdateDescriptor}\n                    />\n                </Grid>\n            </Grid>\n        </>\n    )\n}\n","parent":{"name":"commissioner","ext":".tsx"}},{"content":"import React, { lazy, useMemo, useState } from \"react\"\nimport { Grid, Link } from \"@material-ui/core\"\nimport useLocalStorage from \"../../components/hooks/useLocalStorage\"\nimport { clone, unique } from \"../../../jacdac-ts/src/jdom/utils\"\nimport {\n    Box,\n    Chip,\n    Menu,\n    MenuItem,\n    TextField,\n    Typography,\n    Card,\n    CardActions,\n    Button,\n} from \"@material-ui/core\"\nimport { ChangeEvent } from \"react\"\nimport {\n    deviceSpecifications,\n    serviceSpecificationFromClassIdentifier,\n} from \"../../../jacdac-ts/src/jdom/spec\"\nimport PaperBox from \"../../components/ui/PaperBox\"\nimport { uniqueFirmwareId } from \"../../components/RandomGenerator\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport AddIcon from \"@material-ui/icons/Add\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport CreateIcon from \"@material-ui/icons/Create\"\nimport IconButtonWithTooltip from \"../../components/ui/IconButtonWithTooltip\"\nimport { parseRepoUrl } from \"../../components/github\"\nimport {\n    DEVICE_IMAGE_HEIGHT,\n    DEVICE_IMAGE_WIDTH,\n    escapeDeviceIdentifier,\n    escapeDeviceNameIdentifier,\n    normalizeDeviceSpecification,\n} from \"../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\nimport ImportImageCanvas from \"../../components/ImageImportCanvas\"\n// tslint:disable-next-line: no-submodule-imports\nimport { Autocomplete } from \"@material-ui/lab/\"\nimport { useFirmwareBlob } from \"../../components/firmware/useFirmwareBlobs\"\nimport { FirmwareBlob } from \"../../../jacdac-ts/src/jdom/flashing\"\nimport { useId } from \"react-use-id-hook\"\nimport AddServiceIconButton from \"../../components/AddServiceIconButton\"\nimport useDevices from \"../../components/hooks/useDevices\"\nimport DeviceCardHeader from \"../../components/DeviceCardHeader\"\nimport Suspense from \"../../components/ui/Suspense\"\nimport { ControlReg } from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport JDDevice from \"../../../jacdac-ts/src/jdom/device\"\nimport useGridBreakpoints from \"../../components/useGridBreakpoints\"\nimport Alert from \"../../components/ui/Alert\"\n\nconst GithubPullRequestButton = lazy(\n    () => import(\"../../components/buttons/GithubPullRequestButton\")\n)\n\nfunction CompanySelect(props: {\n    error?: string\n    value?: string\n    onValueChange?: (name: string) => void\n}) {\n    const { onValueChange, value, error } = props\n    const [company, setCompany] = useState(value)\n    const companies = useMemo(\n        () => unique(deviceSpecifications().map(dev => dev.company)),\n        []\n    )\n    const companyId = useId()\n    const helperText =\n        \"Name of the company manufacturing this device. The company name will be used to generate the module identifier.\"\n\n    const handleChange = (ev: unknown, newValue: string) => {\n        setCompany(newValue)\n        onValueChange?.(newValue)\n    }\n    const renderInputs = params => (\n        <TextField\n            {...params}\n            error={!!error}\n            label=\"Company\"\n            helperText={error || helperText}\n            variant=\"outlined\"\n        />\n    )\n\n    return (\n        <Autocomplete\n            id={companyId}\n            freeSolo={true}\n            fullWidth={true}\n            includeInputInList\n            autoComplete\n            options={companies}\n            renderInput={renderInputs}\n            inputValue={company}\n            aria-label={helperText}\n            onInputChange={handleChange}\n        />\n    )\n}\n\nexport default function DeviceRegistration() {\n    const [device, setDevice] = useLocalStorage<jdspec.DeviceSpec>(\n        \"jacdac:devicedesigner;2\",\n        {\n            id: \"my-device\",\n            name: \"My device\",\n            services: [],\n            productIdentifiers: [],\n            repo: \"\",\n        } as jdspec.DeviceSpec\n    )\n    const gridBreakpoints = useGridBreakpoints()\n    const devices = useDevices({\n        announced: true,\n        physical: true,\n        ignoreSelf: true,\n        productIdentifier: true,\n    })\n    const updateDevice = () => {\n        setDevice(clone(device))\n    }\n    const [firmwaresAnchorEl, setFirmwaresAnchorEl] =\n        React.useState<null | HTMLElement>(null)\n    const [imageBase64, setImageBase64] = useState<string>(undefined)\n    const nameId = useId()\n    const firmwareMenuId = useId()\n    const repoId = useId()\n    const identifierId = useId()\n    const descriptionId = useId()\n    const homepageId = useId()\n    const handleServiceAdd = (srv: jdspec.ServiceSpec) => {\n        console.log(`add`, srv.classIdentifier)\n        device.services.push(srv.classIdentifier)\n        updateDevice()\n    }\n    const companyRepos = useMemo(\n        () =>\n            unique(\n                deviceSpecifications()\n                    .filter(d => d.company === device.company)\n                    .map(d => d.repo)\n                    .filter(repo => !!repo)\n            ),\n        [device?.company]\n    )\n    const { firmwareBlobs } = useFirmwareBlob(device.repo)\n    const variant = \"outlined\"\n    const companyError = !device.company ? \"select a company\" : \"\"\n    const nameError = device.name?.length > 32 ? \"name too long\" : undefined\n    const parsedRepo = parseRepoUrl(device.repo)\n    const githubError = parsedRepo ? \"\" : \"invalid GitHub repository\"\n    const linkError =\n        !device.link || /^https:\\/\\//.test(device.link)\n            ? \"\"\n            : \"Must be https://...\"\n    const idError = !device.id\n        ? \"missing identifier\"\n        : deviceSpecifications().find(dev => dev.id == device.id)\n        ? \"identifer already used\"\n        : \"\"\n    const servicesError = device.services?.length\n        ? \"\"\n        : \"Select at least one service\"\n    const imageError = !imageBase64 ? \"missing image\" : \"\"\n    const ok =\n        !nameError &&\n        parsedRepo &&\n        !linkError &&\n        !idError &&\n        !servicesError &&\n        !imageError &&\n        !companyError\n\n    const route = device.id?.split(\"-\").join(\"/\")\n    const modulePath = ok && `devices/${route}.json`\n    const imagePath = ok && `devices/${route}.jpg`\n\n    const updateDeviceId = () => {\n        const companyid = escapeDeviceIdentifier(device.company)\n        const nameid = escapeDeviceNameIdentifier(device.name)\n        device.id = companyid + \"-\" + nameid\n    }\n\n    const handleNameChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        device.name = ev.target.value\n        updateDeviceId()\n        updateDevice()\n    }\n    const handleRepoChange = (ev: unknown, newValue: string) => {\n        console.log(`new repo`, { newValue })\n        device.repo = newValue\n        updateDevice()\n    }\n    const handleLinkChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        device.link = ev.target.value\n        updateDevice()\n    }\n    const handleDescriptionChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        device.description = ev.target.value\n        updateDevice()\n    }\n    const handleDeleteService = (i: number) => () => {\n        device.services.splice(i, 1)\n        updateDevice()\n    }\n    const handleDeleteFirmware = (i: number) => () => {\n        device.productIdentifiers.splice(i, 1)\n        updateDevice()\n    }\n    const handleFirmwareAddClick = (\n        event: React.MouseEvent<HTMLButtonElement>\n    ) => {\n        setFirmwaresAnchorEl(event.currentTarget)\n        // device.firmwares.push(parseInt(uniqueFirmwareId(), 16))\n        updateDevice()\n    }\n    const handleProductIdentifierAddRandomClick = () => {\n        device.productIdentifiers.push(parseInt(uniqueFirmwareId(), 16))\n        updateDevice()\n    }\n    const handleFirmwareAddClose = (blob: FirmwareBlob) => () => {\n        setFirmwaresAnchorEl(null)\n        const id = blob?.productIdentifier\n        if (id !== undefined) {\n            device.productIdentifiers.push(id)\n            device.name = blob.name\n            updateDeviceId()\n            updateDevice()\n        }\n    }\n    const handleImageImported = (cvs: HTMLCanvasElement) => {\n        const url = cvs.toDataURL(\"image/jpeg\", 99)\n        setImageBase64(url.slice(url.indexOf(\",\")))\n    }\n    const handleCompanyChanged = (value: string) => {\n        device.company = value\n        updateDeviceId()\n        updateDevice()\n    }\n    const renderRepoInput = params => (\n        <TextField\n            {...params}\n            error={!!githubError}\n            type=\"url\"\n            label=\"Firmware repository *\"\n            helperText={\n                githubError ||\n                \"GitHub Repository hosting the firmware binaries.\"\n            }\n            variant=\"outlined\"\n        />\n    )\n    const handleImportDevice = (dev: JDDevice) => async () => {\n        const controlService = dev.service(0)\n        const descrReg = controlService.register(ControlReg.DeviceDescription)\n        await descrReg.refresh(true)\n        const urlReg = controlService.register(ControlReg.DeviceUrl)\n        await urlReg.refresh(true)\n\n        const fw = await dev.resolveProductIdentifier()\n        if (fw) device.productIdentifiers = [fw]\n        device.services = dev.serviceClasses.slice(1)\n        device.description = descrReg.stringValue\n        device.link = urlReg.stringValue\n        updateDevice()\n    }\n\n    return (\n        <>\n            <h1>Device Registration</h1>\n            <p>\n                Compose a device from various services, prepare the metadata and\n                register it to the <Link href=\"/devices/\">Devices catalog</Link>\n                .\n            </p>\n            <Grid container direction=\"row\" spacing={2}>\n                {devices.map(dev => (\n                    <Grid item key={dev.id} {...gridBreakpoints}>\n                        <Card>\n                            <DeviceCardHeader device={dev} />\n                            <CardActions>\n                                <Button\n                                    variant=\"outlined\"\n                                    onClick={handleImportDevice(dev)}\n                                >\n                                    Import\n                                </Button>\n                            </CardActions>\n                        </Card>\n                    </Grid>\n                ))}\n                <Grid item xs={12}>\n                    <TextField\n                        id={nameId}\n                        required\n                        error={!!nameError}\n                        helperText={nameError}\n                        fullWidth={true}\n                        label=\"Name\"\n                        placeholder=\"My module\"\n                        value={device.name || \"\"}\n                        onChange={handleNameChange}\n                        variant={variant}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <Autocomplete\n                        id={repoId}\n                        freeSolo={true}\n                        autoComplete\n                        placeholder=\"https://github.com/...\"\n                        inputValue={device.repo || \"\"}\n                        onInputChange={handleRepoChange}\n                        options={companyRepos}\n                        renderInput={renderRepoInput}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <CompanySelect\n                        value={device?.company}\n                        error={companyError}\n                        onValueChange={handleCompanyChanged}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <PaperBox elevation={1}>\n                        <Typography>Product Identifiers</Typography>\n                        {device.productIdentifiers?.map((id, i) => {\n                            const blob = firmwareBlobs?.find(\n                                b => b.productIdentifier == id\n                            )\n                            return (\n                                <Box\n                                    component=\"span\"\n                                    ml={0.5}\n                                    mb={0.5}\n                                    key={id}\n                                >\n                                    <Chip\n                                        label={\n                                            blob\n                                                ? `${\n                                                      blob.name\n                                                  } (0x${id.toString(16)})`\n                                                : `0x${id.toString(16)}`\n                                        }\n                                        onDelete={handleDeleteFirmware(i)}\n                                    />\n                                </Box>\n                            )\n                        })}\n                        <IconButtonWithTooltip\n                            title=\"Add random product identifier\"\n                            onClick={handleProductIdentifierAddRandomClick}\n                        >\n                            <CreateIcon />\n                        </IconButtonWithTooltip>\n                        {firmwareBlobs && (\n                            <IconButtonWithTooltip\n                                title=\"Add product identifier from repository\"\n                                aria-controls={firmwareMenuId}\n                                aria-haspopup=\"true\"\n                                onClick={handleFirmwareAddClick}\n                            >\n                                <AddIcon />\n                            </IconButtonWithTooltip>\n                        )}\n                        <Menu\n                            id={firmwareMenuId}\n                            anchorEl={firmwaresAnchorEl}\n                            keepMounted\n                            open={Boolean(firmwaresAnchorEl)}\n                            onClose={handleFirmwareAddClose(undefined)}\n                        >\n                            {firmwareBlobs?.map(blob => (\n                                <MenuItem\n                                    key={blob.productIdentifier}\n                                    value={blob.productIdentifier.toString(16)}\n                                    onClick={handleFirmwareAddClose(blob)}\n                                >\n                                    {blob.name}\n                                    <Typography\n                                        variant=\"caption\"\n                                        component=\"span\"\n                                    >\n                                        {blob.version}\n                                    </Typography>\n                                </MenuItem>\n                            ))}\n                        </Menu>\n                        <Typography variant=\"caption\" component=\"div\">\n                            Product identifiers uniquely identify your hardware\n                            on the Jacdac bus. Each revision of your hardware\n                            may have a different identifier.\n                        </Typography>\n                    </PaperBox>\n                </Grid>\n                <Grid item xs={12}>\n                    <PaperBox elevation={1}>\n                        <Typography color={servicesError ? \"error\" : \"inherit\"}>\n                            Services *\n                        </Typography>\n                        {device.services?.map((id, i) => (\n                            <Box component=\"span\" m={0.5} key={id}>\n                                <Chip\n                                    label={\n                                        serviceSpecificationFromClassIdentifier(\n                                            id\n                                        )?.name || id\n                                    }\n                                    onDelete={handleDeleteService(i)}\n                                />\n                            </Box>\n                        ))}\n                        <AddServiceIconButton onAdd={handleServiceAdd} />\n                    </PaperBox>\n                </Grid>\n                <Grid item xs={12}>\n                    <TextField\n                        id={identifierId}\n                        disabled\n                        error={!!idError}\n                        fullWidth={true}\n                        label=\"Identifier\"\n                        helperText={\n                            \"This generated identifer is a URL friendly string created from your company and product name.\"\n                        }\n                        variant={variant}\n                        value={device.id || \"\"}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <TextField\n                        id={descriptionId}\n                        fullWidth={true}\n                        required\n                        label=\"Description\"\n                        multiline={true}\n                        rows={4}\n                        value={device.description || \"\"}\n                        onChange={handleDescriptionChange}\n                        variant={variant}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <TextField\n                        id={homepageId}\n                        label=\"Home page url\"\n                        error={!!linkError}\n                        helperText={linkError}\n                        fullWidth={true}\n                        placeholder=\"https://...\"\n                        value={device.link || \"\"}\n                        onChange={handleLinkChange}\n                        variant={variant}\n                        type=\"url\"\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <PaperBox>\n                        <Typography>Catalog image</Typography>\n                        <ImportImageCanvas\n                            width={DEVICE_IMAGE_WIDTH}\n                            height={DEVICE_IMAGE_HEIGHT}\n                            onImageImported={handleImageImported}\n                        />\n                        <Typography variant=\"caption\" component=\"div\">\n                            {`Import a ${DEVICE_IMAGE_WIDTH}x${DEVICE_IMAGE_HEIGHT} image of the device.`}\n                        </Typography>\n                        {imageError && (\n                            <Alert severity=\"error\">{imageError}</Alert>\n                        )}\n                    </PaperBox>\n                </Grid>\n                <Grid item xs={12}>\n                    <Suspense>\n                        <GithubPullRequestButton\n                            label={\"register device\"}\n                            title={`Device: ${device.name}`}\n                            head={`devices/${device.id}`}\n                            description={`This pull request registers a new device for Jacdac.`}\n                            files={\n                                modulePath && {\n                                    [modulePath]: JSON.stringify(\n                                        normalizeDeviceSpecification(device),\n                                        null,\n                                        2\n                                    ),\n                                    [imagePath]: {\n                                        content: imageBase64,\n                                        encoding: \"base64\",\n                                    },\n                                }\n                            }\n                        />\n                    </Suspense>\n                </Grid>\n            </Grid>\n        </>\n    )\n}\n","parent":{"name":"device-registration","ext":".tsx"}},{"content":"import {\n    Card,\n    CardActions,\n    CardContent,\n    CardHeader,\n    Grid,\n    TextField,\n} from \"@material-ui/core\"\nimport React, { ChangeEvent, useState } from \"react\"\nimport useDevices from \"../../components/hooks/useDevices\"\nimport DeviceCardHeader from \"../../components/DeviceCardHeader\"\nimport JDDevice from \"../../../jacdac-ts/src/jdom/device\"\nimport CmdButton from \"../../components/CmdButton\"\nimport { ControlCmd } from \"../../../jacdac-ts/jacdac-spec/dist/specconstants\"\nimport { jdpack } from \"../../../jacdac-ts/src/jdom/pack\"\nimport ConnectAlert from \"../../components/alert/ConnectAlert\"\nimport GridHeader from \"../../components/ui/GridHeader\"\nimport ConnectButtons from \"../../components/buttons/ConnectButtons\"\n\nfunction FloodCard(props: {\n    device: JDDevice\n    numResponses: number\n    startCounter: number\n    size: number\n}) {\n    const { device, numResponses, startCounter, size } = props\n    const handleClick = async () => {\n        const service = device.service(0)\n        const data = jdpack<[number, number, number]>(\"u32 u32 u8\", [\n            numResponses,\n            startCounter,\n            size,\n        ])\n        await service.sendCmdAsync(ControlCmd.FloodPing, data)\n    }\n    return (\n        <Card>\n            <DeviceCardHeader device={device} />\n            <CardActions>\n                <CmdButton onClick={handleClick}>Flood</CmdButton>\n            </CardActions>\n        </Card>\n    )\n}\n\nexport default function Page() {\n    const devices = useDevices({})\n    const [numResponses, setNumResponses] = useState(100)\n    const [startCounter, setStartCounter] = useState(0)\n    const [size, setSize] = useState(32)\n\n    const handleChangeNumberResponses = (ev: ChangeEvent<HTMLInputElement>) => {\n        const i = parseInt(ev.target.value)\n        if (!isNaN(i)) setNumResponses(i)\n    }\n    const handleChangeStartCounter = (ev: ChangeEvent<HTMLInputElement>) => {\n        const i = parseInt(ev.target.value)\n        if (!isNaN(i)) setStartCounter(Math.max(0, i))\n    }\n    const handleChangeSize = (ev: ChangeEvent<HTMLInputElement>) => {\n        const i = parseInt(ev.target.value)\n        if (!isNaN(i)) setSize(Math.max(1, i))\n    }\n\n    return (\n        <>\n            <h1>Flood Test</h1>\n            <Card>\n                <CardHeader title=\"Configuration\" />\n                <CardContent>\n                    <Grid container spacing={1}>\n                        <Grid item>\n                            <TextField\n                                label=\"number of responses\"\n                                value={numResponses}\n                                onChange={handleChangeNumberResponses}\n                                type=\"number\"\n                            />\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                label=\"start counter\"\n                                value={startCounter}\n                                onChange={handleChangeStartCounter}\n                                type=\"number\"\n                            />\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                label=\"size\"\n                                value={size}\n                                onChange={handleChangeSize}\n                                type=\"number\"\n                            />\n                        </Grid>\n                    </Grid>\n                </CardContent>\n            </Card>\n            <Grid container spacing={1}>\n                <GridHeader\n                    action={<ConnectButtons full={false} transparent={true} />}\n                    title={\"Devices\"}\n                />\n                {devices.map(device => (\n                    <Grid key={device.id} item>\n                        <FloodCard\n                            device={device}\n                            numResponses={numResponses}\n                            startCounter={startCounter}\n                            size={size}\n                        />\n                    </Grid>\n                ))}\n            </Grid>\n            <ConnectAlert />\n        </>\n    )\n}\n","parent":{"name":"flood-test","ext":".tsx"}},{"content":"import React, { useContext, useEffect, useState } from \"react\"\nimport {\n    Box,\n    Button,\n    Card,\n    CardActions,\n    CardContent,\n    CardHeader,\n    CardMedia,\n    CircularProgress,\n    Grid,\n    Switch,\n    Typography,\n    useTheme,\n} from \"@material-ui/core\"\nimport { Link } from \"gatsby-theme-material-ui\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport useChange from \"../../jacdac/useChange\"\nimport useGridBreakpoints from \"../../components/useGridBreakpoints\"\nimport JDRegister from \"../../../jacdac-ts/src/jdom/register\"\nimport { JDClient } from \"../../../jacdac-ts/src/jdom/client\"\nimport DeviceCardHeader from \"../../components/DeviceCardHeader\"\nimport Alert from \"../../components/ui/Alert\"\nimport useEffectAsync from \"../../components/useEffectAsync\"\nimport {\n    CHANGE,\n    CONNECT,\n    CONNECTING,\n    CONNECTION_STATE,\n    DISCONNECT,\n    ERROR,\n    PROGRESS,\n    REPORT_RECEIVE,\n    SRV_MODEL_RUNNER,\n    SRV_SENSOR_AGGREGATOR,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport FieldDataSet from \"../../components/FieldDataSet\"\nimport {\n    deviceSpecificationFromProductIdentifier,\n    isSensor,\n} from \"../../../jacdac-ts/src/jdom/spec\"\nimport CircularProgressWithLabel from \"../../components/ui/CircularProgressWithLabel\"\nimport Trend from \"../../components/Trend\"\n// tslint:disable-next-line: match-default-export-name no-submodule-imports\nimport GetAppIcon from \"@material-ui/icons/GetApp\"\nimport ServiceList from \"../../components/ServiceList\"\nimport { ModelActions, ModelContent } from \"./model-uploader\"\nimport { readBlobToUint8Array } from \"../../../jacdac-ts/src/jdom/utils\"\nimport useDeviceName from \"../../components/devices/useDeviceName\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport ReadingFieldGrid from \"../../components/ReadingFieldGrid\"\nimport useChartPalette from \"../../components/useChartPalette\"\nimport SensorAggregatorClient, {\n    SensorAggregatorConfig,\n} from \"../../../jacdac-ts/src/clients/sensoraggregatorclient\"\nimport { AlertTitle } from \"@material-ui/lab\"\nimport { serviceName } from \"../../../jacdac-ts/src/jdom/pretty\"\nimport ConnectAlert from \"../../components/alert/ConnectAlert\"\nimport ApiKeyAccordion from \"../../components/ApiKeyAccordion\"\nimport { useSecret } from \"../../components/hooks/useSecret\"\n\nconst EDGE_IMPULSE_API_KEY = \"edgeimpulseapikey\"\n\nconst IDLE = \"idle\"\nconst STARTING = \"starting\"\nconst SAMPLING = \"sampling\"\nconst UPLOADING = \"uploading\"\n\nconst SAMPLING_STATE = \"samplingState\"\n\ninterface EdgeImpulseResponse {\n    success: boolean\n    error?: string\n    // HTTP status code\n    errorStatus?: number\n}\n\ninterface EdgeImpulseHello {\n    hello?: boolean\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    err?: any\n}\n\ninterface EdgeImpulseSensorInfo {\n    name: string\n    maxSampleLengthS: number\n    frequencies: number[]\n}\n\ninterface EdgeImpulseRemoteManagementInfo {\n    version: number\n    apiKey: string\n    deviceId: string\n    deviceType: string\n    connection: string\n    sensors: EdgeImpulseSensorInfo[]\n}\n\ninterface EdgeImpulseDeviceInfo {\n    id: number\n    deviceId: string\n    name: string\n    created: string\n    lastSeen: string\n    deviceType: string\n    sensors: EdgeImpulseSensorInfo[]\n}\n\ninterface EdgeImpulseDeviceResponse extends EdgeImpulseResponse {\n    device?: EdgeImpulseDeviceInfo\n}\n\ninterface EdgeImpulseSample extends EdgeImpulseResponse {\n    label: string\n    length: number\n    path: string\n    hmacKey: string\n    interval: number\n    sensor: string\n}\n\ninterface EdgeImpulseSampling extends EdgeImpulseSample {\n    dataSet?: FieldDataSet\n    startTimestamp?: number\n    lastProgressTimestamp?: number\n    generatedFilename?: string\n    aggregatorConfig?: SensorAggregatorConfig\n    unsubscribers?: (() => void)[]\n}\n\ninterface EdgeImpulseProjectInfo {\n    id: number\n    name: string\n    logo?: string\n}\n\ninterface EdgeImpulseProject extends EdgeImpulseResponse {\n    project: EdgeImpulseProjectInfo\n    devices: EdgeImpulseDeviceInfo[]\n    impulse: {\n        created: boolean\n        configured: boolean\n        complete: boolean\n    }\n    dataSummary: {\n        totalLengthMs: number\n        labels: string[]\n        dataCount: number\n    }\n    downloads: {\n        name: string\n        type: string\n        size: string\n        link: string\n    }[]\n}\n\ninterface EdgeImpulseProjects extends EdgeImpulseResponse {\n    projects: EdgeImpulseProjectInfo[]\n}\n\n/*\nA client for the EdgeImpulse remote management\nhttps://docs.edgeimpulse.com/reference#remote-management\n*/\nclass EdgeImpulseClient extends JDClient {\n    private _ws: WebSocket\n    public connectionState = DISCONNECT\n    public samplingState = IDLE\n    private _hello: EdgeImpulseRemoteManagementInfo\n    private _sample: EdgeImpulseSampling\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private _pingInterval: any\n    private pong: boolean\n    private aggregatorClient: SensorAggregatorClient\n\n    constructor(\n        private readonly apiKey: string,\n        private readonly aggregator: JDService,\n        private readonly inputRegisters: JDRegister[],\n        private readonly palette: string[]\n    ) {\n        super()\n\n        this.handleMessage = this.handleMessage.bind(this)\n        this.handleOpen = this.handleOpen.bind(this)\n        this.handleError = this.handleError.bind(this)\n        this.handleReport = this.handleReport.bind(this)\n        this.handlePing = this.handlePing.bind(this)\n\n        this.aggregatorClient = new SensorAggregatorClient(this.aggregator)\n        this.aggregatorClient.subscribeSample(this.handleReport)\n\n        this.mount(() => this.disconnect())\n        this.mount(() => this.aggregatorClient.unmount())\n    }\n\n    get dataSet() {\n        return this._sample?.dataSet\n    }\n\n    disconnect() {\n        this.clearSampling()\n        if (this._pingInterval) {\n            clearInterval(this._pingInterval)\n            this._pingInterval = undefined\n        }\n        // stop socket\n        if (this._ws) {\n            const w = this._ws\n            this._ws = undefined\n            try {\n                w.close()\n            } catch (e) {\n                console.debug(e)\n            } finally {\n                this.setConnectionState(DISCONNECT)\n            }\n        }\n    }\n\n    private setConnectionState(state: string) {\n        if (this.connectionState !== state) {\n            this.connectionState = state\n            this.emit(CONNECTION_STATE, this.connectionState)\n            console.log(`ei: connection state changed`, this.connectionState)\n        }\n    }\n\n    private setSamplingState(state: string) {\n        if (this.samplingState !== state) {\n            this.samplingState = state\n            this.emit(SAMPLING_STATE, this.samplingState)\n            this.emit(CHANGE)\n            console.log(`ei: sampling state changed`, this.samplingState)\n        }\n    }\n\n    private send(msg: unknown) {\n        this._ws?.send(JSON.stringify(msg))\n    }\n\n    private async handleOpen() {\n        console.log(`ws: open`)\n        const service = this.aggregator\n        const { device } = service\n\n        // fetch device spec\n        const productIdentifier =\n            await service.device.resolveProductIdentifier()\n        const deviceSpec =\n            deviceSpecificationFromProductIdentifier(productIdentifier)\n\n        this._hello = {\n            version: 2,\n            apiKey: this.apiKey,\n            deviceId: device.deviceId,\n            deviceType:\n                deviceSpec?.name ||\n                productIdentifier?.toString(16) ||\n                \"Jacdac device\",\n            connection: \"ip\", // direct connection\n            sensors: [\n                {\n                    name: this.inputRegisters\n                        .map(reg => serviceName(reg.service.serviceClass))\n                        .join(\",\"),\n                    maxSampleLengthS: 10000,\n                    frequencies: [50, 30, 20, 10],\n                },\n            ],\n        }\n        this.send({\n            hello: this._hello,\n        })\n    }\n\n    private reconnect() {\n        this.disconnect()\n        this.connect()\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private handleMessage(msg: any) {\n        // response to ping?\n        if (msg.data === \"pong\") {\n            this.pong = true\n            return\n        }\n\n        const data = JSON.parse(msg.data)\n        if (data.hello !== undefined) {\n            const hello = data as EdgeImpulseHello\n            if (!hello.hello) {\n                this.emit(ERROR, hello.err)\n                this.disconnect()\n            } else {\n                this.setConnectionState(CONNECT)\n            }\n        } else if (data.sample) {\n            const sample = data.sample as EdgeImpulseSample\n            this.startSampling(sample)\n        }\n    }\n\n    get connected() {\n        return this.connectionState === CONNECT\n    }\n\n    get sampling() {\n        return this.samplingState !== IDLE\n    }\n\n    get generatedSampleName() {\n        return this._sample?.generatedFilename\n    }\n\n    get aggregatorConfig() {\n        return this._sample?.aggregatorConfig\n    }\n\n    private handleReport(row: number[]) {\n        console.log(`ei: aggregator report`, this.connected, this.sampling)\n        if (!this.connected) return // ignore\n\n        // partial data? ignore\n        if (row.some(r => r === undefined)) return\n\n        const { bus } = this.aggregator.device\n        const { timestamp } = bus\n        // first sample, notify we're started\n        if (this.samplingState == STARTING) {\n            this._sample.startTimestamp = this._sample.lastProgressTimestamp =\n                timestamp\n            this.send({ sampleStarted: true })\n            this.setSamplingState(SAMPLING)\n        }\n        // store sample\n        if (this.samplingState == SAMPLING) {\n            const ds = this.dataSet\n            ds.addRow(row)\n            this.emit(REPORT_RECEIVE)\n\n            // debounced progress update\n            if (timestamp - this._sample.lastProgressTimestamp > 100) {\n                this._sample.lastProgressTimestamp = timestamp\n                this.emit(PROGRESS, this.progress)\n            }\n\n            if (\n                timestamp - this._sample.startTimestamp >=\n                this._sample.length\n            ) {\n                // first stop the sampling\n                this.stopSampling()\n                // we're done!\n                this.emit(PROGRESS, this.progress)\n                // and upload...\n                this.uploadData()\n            }\n        }\n    }\n\n    private uploadData(): Promise<void> {\n        this.setSamplingState(UPLOADING)\n        const ds = this.dataSet\n        const payload = {\n            protected: {\n                ver: \"v1\",\n                alg: \"none\",\n                iat: Date.now(),\n            },\n            signature: \"\",\n            payload: {\n                device_name: this._hello.deviceId,\n                device_type: this._hello.deviceType,\n                interval_ms: this._sample.interval,\n                sensors: ds.headers.map((h, i) => ({\n                    name: ds.headers[i],\n                    units: ds.units[i] || \"/\",\n                })),\n                values: ds.data(true),\n            },\n        }\n        console.log(`payload`, payload)\n        // upload dataset\n        // https://docs.edgeimpulse.com/reference#ingestion-api\n        return fetch(`https://ingestion.edgeimpulse.com${this._sample.path}`, {\n            method: \"POST\",\n            headers: {\n                \"x-api-key\": this.apiKey,\n                \"x-label\": this._sample.label,\n                \"x-file-name\": ds.name,\n                \"x-disallow-duplicates\": \"true\",\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(payload),\n        })\n            .then(async resp => {\n                // response contains the filename\n                const filename = await resp.text()\n                this._sample.generatedFilename = filename\n            })\n            .finally(() => {\n                this.send({\n                    sampleFinished: true,\n                })\n                this.setSamplingState(IDLE)\n            })\n    }\n\n    private handleError(ev: Event) {\n        this.emit(ERROR, ev)\n        this.reconnect()\n    }\n\n    private async startSampling(sample: EdgeImpulseSample) {\n        this._sample = sample\n        this._sample.dataSet = FieldDataSet.create(\n            this.aggregator.device.bus,\n            this.inputRegisters,\n            \"sample\",\n            this.palette\n        )\n        this._sample.unsubscribers = []\n        this.send({ sample: true })\n        this.setSamplingState(STARTING)\n\n        // prepare configuration\n        this._sample.aggregatorConfig = {\n            samplingInterval: this._sample.interval,\n            samplesInWindow: 10,\n            inputs: this.inputRegisters.map(reg => ({\n                serviceClass: reg.service.serviceClass,\n                deviceId: reg.service.device.deviceId,\n                serviceIndex: reg.service.serviceIndex,\n            })),\n        }\n\n        console.log(`ei: input`, this._sample.aggregatorConfig)\n        // setup aggregator client\n        await this.aggregatorClient.setInputs(this._sample.aggregatorConfig)\n        // schedule data collection, ask a few more samples\n        await this.aggregatorClient.collect(this._sample.length * 1.1)\n    }\n\n    private stopSampling() {\n        const sample = this._sample\n        if (sample) {\n            sample.unsubscribers.forEach(unsub => {\n                try {\n                    unsub()\n                } catch (e) {\n                    console.log(e)\n                }\n            })\n            sample.unsubscribers = []\n        }\n    }\n\n    private clearSampling() {\n        this.stopSampling()\n        if (this._sample) {\n            this._sample = undefined\n            this._hello = undefined\n            this.setSamplingState(IDLE)\n        }\n    }\n\n    connect() {\n        if (this._ws) return // already connected\n\n        console.log(`ei: connect`)\n        this.setConnectionState(CONNECTING)\n        this._ws = new WebSocket(\"wss://remote-mgmt.edgeimpulse.com\")\n        this._ws.onmessage = this.handleMessage\n        this._ws.onopen = this.handleOpen\n        this._ws.onerror = this.handleError\n\n        this.pong = true\n        this._pingInterval = setInterval(this.handlePing, 3000)\n    }\n\n    private handlePing() {\n        if (!this.connected) return\n\n        if (!this.pong) {\n            // the socket did not response\n            console.log(`missing pong`)\n            this.reconnect()\n        } else {\n            // send a new ping and wait for pong\n            this.pong = false\n            this._ws.send(\"ping\")\n        }\n    }\n\n    get progress() {\n        const timestamp = this.aggregator.device.bus.timestamp\n        return (\n            this.samplingState !== IDLE &&\n            (timestamp - this._sample.startTimestamp) / this._sample.length\n        )\n    }\n\n    static async currentProjectInfo(apiKey: string): Promise<{\n        valid: boolean\n        errorStatus?: number\n        project?: EdgeImpulseProject\n    }> {\n        if (!apiKey) return { valid: false }\n\n        const rsj = await EdgeImpulseClient.apiFetch<EdgeImpulseProjects>(\n            apiKey,\n            \"projects\"\n        )\n        if (!rsj.success) {\n            return {\n                valid: false,\n                errorStatus: rsj.errorStatus,\n            }\n        }\n\n        // the API returns the current project when using the API key\n        const projectId = rsj.projects?.[0]?.id\n        if (!rsj?.success || projectId === undefined) {\n            return {\n                valid: true,\n                errorStatus: 402,\n            }\n        }\n\n        const project = await EdgeImpulseClient.apiFetch<EdgeImpulseProject>(\n            apiKey,\n            projectId\n        )\n        return {\n            valid: true,\n            errorStatus: project.errorStatus,\n            project,\n        }\n    }\n\n    static async apiFetch<T extends EdgeImpulseResponse>(\n        apiKey: string,\n        path: string | number,\n        body?: unknown\n    ): Promise<T> {\n        const API_ROOT = \"https://studio.edgeimpulse.com/v1/api/\"\n        const url = `${API_ROOT}${path}`\n        const options: RequestInit = {\n            method: body ? \"POST\" : \"GET\",\n            headers: {\n                \"x-api-key\": apiKey,\n                Accept: \"application/json\",\n            },\n            body: body && JSON.stringify(body),\n        }\n        if (options.method === \"POST\")\n            options.headers[\"Content-Type\"] = \"application/json\"\n\n        const resp = await fetch(url, options)\n        if (resp.status !== 200)\n            return {\n                success: false,\n                errorStatus: resp.status,\n                error: resp.statusText,\n            } as T\n        try {\n            const payload = (await resp.json()) as T\n            return payload\n        } catch (e) {\n            return {\n                success: false,\n                errorStatus: 500,\n                error: e.message,\n            } as T\n        }\n    }\n\n    static async deviceInfo(\n        apiKey: string,\n        projectId: number,\n        deviceId: string\n    ): Promise<EdgeImpulseDeviceResponse> {\n        return await EdgeImpulseClient.apiFetch<EdgeImpulseDeviceResponse>(\n            apiKey,\n            `${projectId}/device/${deviceId}`\n        )\n    }\n\n    static async renameDevice(\n        apiKey: string,\n        projectId: number,\n        deviceId: string,\n        name: string\n    ): Promise<EdgeImpulseResponse> {\n        return await EdgeImpulseClient.apiFetch<EdgeImpulseResponse>(\n            apiKey,\n            `${projectId}/devices/${deviceId}/rename`,\n            { name }\n        )\n    }\n}\n\nfunction ApiKeyManager() {\n    const validateKey = async (key: string) => {\n        const r = await EdgeImpulseClient.currentProjectInfo(key)\n        return {\n            status: (r?.valid && 200) || r?.errorStatus || 500,\n        }\n    }\n    return (\n        <ApiKeyAccordion\n            apiName={EDGE_IMPULSE_API_KEY}\n            validateKey={validateKey}\n        >\n            To get an <b>API key</b>, navigate to &nbsp;\n            <Link\n                to=\"https://studio.edgeimpulse.com/studio/8698/keys\"\n                target=\"_blank\"\n            >\n                https://studio.edgeimpulse.com/studio/8698/keys\n            </Link>\n            &nbsp; and generate a new key.\n        </ApiKeyAccordion>\n    )\n}\n\nfunction useEdgeImpulseProjectInfo(apiKey: string) {\n    const [info, setInfo] = useState<EdgeImpulseProject>(undefined)\n\n    useEffectAsync(\n        async mounted => {\n            if (!apiKey) {\n                if (mounted()) setInfo(undefined)\n            } else {\n                const r = await EdgeImpulseClient.currentProjectInfo(apiKey)\n                if (mounted()) setInfo(r?.project)\n            }\n        },\n        [apiKey]\n    )\n\n    return info\n}\n\nfunction ProjectInfo(props: { info: EdgeImpulseProject }) {\n    const { info } = props\n    const disabled = !info?.success\n\n    return (\n        <Card>\n            <CardHeader\n                title={info?.project?.name || \"...\"}\n                subheader={\n                    info?.dataSummary &&\n                    `${info?.dataSummary?.dataCount} samples`\n                }\n            />\n            {info?.project?.logo && <CardMedia image={info?.project?.logo} />}\n            <CardActions>\n                <Button\n                    disabled={disabled}\n                    target=\"_blank\"\n                    href={`https://studio.edgeimpulse.com/studio/${info?.project?.id}/`}\n                    variant=\"contained\"\n                    color=\"primary\"\n                >\n                    Open EdgeImpulse\n                </Button>\n            </CardActions>\n        </Card>\n    )\n}\n\nfunction ModelDownloadButton(props: {\n    apiKey: string\n    info: EdgeImpulseProject\n    setModel: (blob: Uint8Array) => void\n}) {\n    const { apiKey, info, setModel } = props\n    const theme = useTheme()\n    const [downloading, setDownloading] = useState(false)\n    const [error, setError] = useState(\"\")\n    const download = info?.downloads.find(\n        download => download.type === \"TensorFlow Lite (float32)\"\n    )\n\n    const handleDownload = (url: string) => async () => {\n        try {\n            setDownloading(true)\n            setError(\"\")\n            const resp = await fetch(url, {\n                headers: {\n                    \"x-api-key\": apiKey,\n                },\n            })\n            const res = await resp.blob()\n            const bytes = await readBlobToUint8Array(res)\n            setModel(bytes)\n        } catch (e) {\n            console.log(e)\n            setError(\"Oops, download failed.\")\n        } finally {\n            setDownloading(false)\n        }\n    }\n\n    return (\n        <Box mb={1}>\n            {error && <Alert severity=\"error\">{error}</Alert>}\n            <Button\n                variant=\"contained\"\n                disabled={!download || downloading}\n                startIcon={\n                    downloading ? (\n                        <CircularProgress size={theme.spacing(2)} />\n                    ) : (\n                        <GetAppIcon />\n                    )\n                }\n                onClick={handleDownload(\n                    `https://studio.edgeimpulse.com${download?.link}`\n                )}\n            >\n                DOWNLOAD MODEL\n            </Button>\n        </Box>\n    )\n}\n\nfunction AggregatorCard(props: {\n    aggregator: JDService\n    selected: boolean\n    onChecked: () => void\n}) {\n    const { aggregator, selected, onChecked } = props\n    const { device } = aggregator\n\n    const handleChecked = () => onChecked()\n\n    return (\n        <Card>\n            <DeviceCardHeader device={device} showMedia={true} />\n            <CardContent>\n                <Switch checked={selected} onChange={handleChecked} />\n            </CardContent>\n        </Card>\n    )\n}\n\nfunction Acquisition(props: {\n    aggregator: JDService\n    inputs: JDRegister[]\n    apiKey: string\n    info: EdgeImpulseProjectInfo\n}) {\n    const { aggregator, inputs, apiKey, info } = props\n\n    const { device } = aggregator\n    const [client, setClient] = useState<EdgeImpulseClient>(undefined)\n    const [error, setError] = useState(\"\")\n    const [connectionState, setConnectionState] = useState(DISCONNECT)\n    const [samplingState, setSamplingState] = useState(IDLE)\n    const [samplingProgress, setSamplingProgress] = useState(0)\n    const [, setDeviceInfo] = useState<EdgeImpulseDeviceInfo>(undefined)\n    const { deviceId } = device\n    const deviceName = useDeviceName(device, false)\n    const projectId = info?.id\n    const palette = useChartPalette()\n\n    const connected = connectionState === CONNECT\n    const sampling = samplingState !== IDLE\n    const dataSet = client?.dataSet\n    const generatedSampleName = client?.generatedSampleName\n    const aggregatorConfig = client?.aggregatorConfig\n\n    useEffect(() => {\n        if (!apiKey || !aggregator || !inputs?.length) {\n            setClient(undefined)\n            setError(undefined)\n            return undefined\n        } else {\n            console.log(`ei: start client`)\n            const c = new EdgeImpulseClient(apiKey, aggregator, inputs, palette)\n            c.connect()\n            setClient(c)\n            setError(undefined)\n            return () => c.unmount()\n        }\n    }, [apiKey, aggregator, inputs?.map(ip => ip.id).join(\",\")])\n    // subscribe to client changes\n    useEffect(\n        () =>\n            client?.subscribe(CONNECTION_STATE, (v: string) =>\n                setConnectionState(v)\n            ),\n        [client]\n    )\n    // subscribe to client changes\n    useEffect(\n        () =>\n            client?.subscribe(SAMPLING_STATE, (v: string) =>\n                setSamplingState(v)\n            ),\n        [client]\n    )\n    // listen to errors\n    useEffect(\n        () => client?.subscribe(ERROR, (e: string) => setError(e)),\n        [client]\n    )\n    // progress\n    useEffect(\n        () =>\n            client?.subscribe(PROGRESS, (p: number) =>\n                setSamplingProgress(p * 100)\n            ),\n        [client]\n    )\n\n    // name checking\n    useEffectAsync(async () => {\n        if (!apiKey || projectId === undefined) {\n            setDeviceInfo(undefined)\n        } else {\n            const resp = await EdgeImpulseClient.deviceInfo(\n                apiKey,\n                projectId,\n                deviceId\n            )\n            const info = resp.success && resp.device\n            if (info && info.name !== deviceName) {\n                // no name assigned, use current\n                if (info.name === deviceId) {\n                    console.log(`ei: sync name`)\n                    const rename = await EdgeImpulseClient.renameDevice(\n                        apiKey,\n                        projectId,\n                        deviceId,\n                        deviceName\n                    )\n                    if (rename.success) {\n                        info.name = deviceName\n                    }\n                }\n            }\n            setDeviceInfo(info)\n        }\n    }, [apiKey, projectId, deviceName])\n\n    return (\n        <Box>\n            {connected && (\n                <Alert severity={\"success\"}>Connected to EdgeImpulse</Alert>\n            )}\n            {error && <Alert severity={\"error\"}>{error}</Alert>}\n            {sampling && (\n                <Alert severity={\"info\"}>\n                    <AlertTitle>Sampling...</AlertTitle>\n                    <CircularProgressWithLabel value={samplingProgress} />\n                </Alert>\n            )}\n            {!!dataSet && <Trend dataSet={dataSet} />}\n            {generatedSampleName && (\n                <Typography variant=\"body2\">\n                    sample name: {generatedSampleName}\n                </Typography>\n            )}\n            {aggregatorConfig && (\n                <pre>{JSON.stringify(aggregatorConfig, null, 2)}</pre>\n            )}\n        </Box>\n    )\n}\n\nexport default function EdgeImpulse() {\n    const { value: apiKey } = useSecret(EDGE_IMPULSE_API_KEY)\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const [model, setModel] = useState<Uint8Array>(undefined)\n    const [registerIdsChecked, setRegisterIdsChecked] = useState<string[]>([])\n    const [aggregatorId, setAggregatorId] = useState<string>(\"\")\n    const gridBreakPoints = useGridBreakpoints()\n    const info = useEdgeImpulseProjectInfo(apiKey)\n\n    const aggregators: JDService[] = useChange(bus, bus =>\n        bus.services({ serviceClass: SRV_SENSOR_AGGREGATOR })\n    )\n    const currentAggregator: JDService =\n        aggregators.find(srv => srv.id == aggregatorId) || aggregators[0]\n    const readingRegisters = useChange(bus, bus =>\n        bus\n            .devices()\n            .map(\n                device =>\n                    device.services().find(srv => isSensor(srv.specification))\n                        ?.readingRegister\n            )\n            .filter(reg => !!reg)\n    )\n    const inputs = readingRegisters.filter(\n        reg => registerIdsChecked.indexOf(reg.id) > -1\n    )\n\n    const handleAggregatorChecked = (srv: JDService) => () => {\n        const id = srv?.id == aggregatorId ? \"\" : srv?.id\n        setAggregatorId(id)\n    }\n    const handleRegisterCheck = (reg: JDRegister) => {\n        const i = registerIdsChecked.indexOf(reg.id)\n        if (i > -1) registerIdsChecked.splice(i, 1)\n        else registerIdsChecked.push(reg.id)\n        registerIdsChecked.sort()\n        setRegisterIdsChecked([...registerIdsChecked])\n    }\n\n    return (\n        <>\n            <h1>Edge Impulse</h1>\n            <p>\n                Use Jacdac to inject data and download models into{\" \"}\n                <Link href=\"https://studio.edgeimpulse.com\">\n                    https://studio.edgeimpulse.com\n                </Link>\n                .\n            </p>\n            <ConnectAlert />\n            <ApiKeyManager />\n            <Box mb={1} />\n            <ProjectInfo info={info} />\n            <h3>Data</h3>\n            <h4>Select Sensors</h4>\n            {!readingRegisters?.length && (\n                <Alert severity=\"info\">No sensor found...</Alert>\n            )}\n            {!!readingRegisters.length && (\n                <ReadingFieldGrid\n                    readingRegisters={readingRegisters}\n                    registerIdsChecked={registerIdsChecked}\n                    handleRegisterCheck={handleRegisterCheck}\n                />\n            )}\n            <h4>Select Sensor Aggregator</h4>\n            {!aggregators?.length && (\n                <Alert severity=\"info\">No data aggregator found...</Alert>\n            )}\n            <Grid container spacing={2}>\n                {aggregators.map(aggregator => (\n                    <Grid key={aggregator.id} item {...gridBreakPoints}>\n                        <AggregatorCard\n                            aggregator={aggregator}\n                            selected={currentAggregator === aggregator}\n                            onChecked={handleAggregatorChecked(aggregator)}\n                        />\n                    </Grid>\n                ))}\n            </Grid>\n            <h4>Acquisition status</h4>\n            {!currentAggregator && (\n                <Alert severity=\"info\">No data aggregator selected...</Alert>\n            )}\n            {!inputs?.length && (\n                <Alert severity=\"info\">\n                    Select sensors to collect data from...\n                </Alert>\n            )}\n            {currentAggregator && !!inputs?.length && (\n                <Acquisition\n                    aggregator={currentAggregator}\n                    inputs={inputs}\n                    apiKey={apiKey}\n                    info={info?.project}\n                />\n            )}\n            <h3>Deployment</h3>\n            {model && (\n                <Box mb={1}>\n                    <Alert severity=\"success\">Model downloaded!</Alert>\n                </Box>\n            )}\n            <ModelDownloadButton\n                apiKey={apiKey}\n                info={info}\n                setModel={setModel}\n            />\n            <ServiceList\n                serviceClass={SRV_MODEL_RUNNER}\n                content={service => <ModelContent service={service} />}\n                actions={service => (\n                    <ModelActions service={service} model={model} />\n                )}\n                alertMissing={\"No model runner found...\"}\n            />\n        </>\n    )\n}\n","parent":{"name":"edge-impulse","ext":".tsx"}},{"content":"import React, {\n    lazy,\n    useCallback,\n    useContext,\n    useEffect,\n    useRef,\n    useState,\n} from \"react\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport {\n    Card,\n    CardActions,\n    CardContent,\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    Grid,\n    Typography,\n} from \"@material-ui/core\"\nimport useChange from \"../../jacdac/useChange\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport {\n    HidKeyboardModifiers,\n    SRV_CONTROL,\n    SRV_LOGGER,\n    SRV_PROTO_TEST,\n    SRV_ROLE_MANAGER,\n    SRV_SETTINGS,\n    SystemEvent,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport JDEvent from \"../../../jacdac-ts/src/jdom/event\"\nimport KeyboardKeyInput from \"../../components/ui/KeyboardKeyInput\"\nimport IconButtonWithTooltip from \"../../components/ui/IconButtonWithTooltip\"\nimport DeleteIcon from \"@material-ui/icons/Delete\"\nimport SettingsClient from \"../../../jacdac-ts/src/jdom/clients/settingsclient\"\nimport useServiceClient from \"../../components/useServiceClient\"\nimport {\n    arrayConcatMany,\n    clone,\n    fromHex,\n    toHex,\n} from \"../../../jacdac-ts/src/jdom/utils\"\nimport { jdpack, jdunpack } from \"../../../jacdac-ts/src/jdom/pack\"\nimport { randomDeviceId } from \"../../../jacdac-ts/src/jdom/random\"\nimport JDBus from \"../../../jacdac-ts/src/jdom/bus\"\nimport useServices from \"../../components/hooks/useServices\"\nimport { Button } from \"gatsby-theme-material-ui\"\nimport Alert from \"../../components/ui/Alert\"\nimport GridHeader from \"../../components/ui/GridHeader\"\nimport { humanify } from \"../../../jacdac-ts/jacdac-spec/spectool/jdspec\"\nimport ConnectAlert from \"../../components/alert/ConnectAlert\"\nimport DeviceCardHeader from \"../../components/DeviceCardHeader\"\nimport useGridBreakpoints from \"../../components/useGridBreakpoints\"\nimport Suspense from \"../../components/ui/Suspense\"\nimport useServiceProviderFromServiceClass from \"../../components/hooks/useServiceProviderFromServiceClass\"\nimport AppContext from \"../../components/AppContext\"\nimport { AlertTitle } from \"@material-ui/lab\"\nimport { renderKeyboardKey } from \"../../../jacdac-ts/src/servers/hidkeyboardserver\"\nconst ImportButton = lazy(() => import(\"../../components/ImportButton\"))\n\n// all settings keys are prefixed with this string\nconst PREFIX = \"@ke_\"\n// data layout format (18bytes)\nconst FORMAT = \"b[8] u32 u8 u8 u16 u16\"\n// data layout types\ntype FORMAT_TYPE = [Uint8Array, number, number, number, number, number]\n\ninterface HIDEvent {\n    key?: string\n    eventId: string\n    selector: number\n    modifiers: HidKeyboardModifiers\n}\n\nfunction HIDEventToBuffer(event: JDEvent, ev: HIDEvent) {\n    const deviceId = fromHex(event.service.device.deviceId)\n    const { service, code } = event\n    const { serviceClass, serviceIndex } = service\n    const { selector, modifiers } = ev\n    const payload = jdpack<FORMAT_TYPE>(FORMAT, [\n        deviceId,\n        serviceClass,\n        serviceIndex,\n        code,\n        selector,\n        modifiers,\n    ])\n    return payload\n}\n\nfunction bufferToHIDEvent(key: string, data: Uint8Array, bus: JDBus): HIDEvent {\n    if (data?.length !== 18) return undefined\n    const [\n        deviceId,\n        serviceClass,\n        serviceIndex,\n        eventCode,\n        selector,\n        modifiers,\n    ] = jdunpack<FORMAT_TYPE>(data, FORMAT)\n    const deviceIds = toHex(deviceId)\n    const device = bus.device(deviceIds, true)\n    const event = device?.service(serviceIndex)?.event(eventCode)\n\n    if (!event || event.service.serviceClass !== serviceClass) return undefined\n    return {\n        key,\n        eventId: event.id,\n        selector,\n        modifiers,\n    }\n}\n\nfunction SelectHIDEvent(props: { onAdd: (hidEvent: HIDEvent) => void }) {\n    const { onAdd } = props\n    const [event, setEvent] = useState<JDEvent>()\n    const [selector, setSelector] = useState(0)\n    const [modifiers, setModifiers] = useState(HidKeyboardModifiers.None)\n\n    const excludedServices = [\n        SRV_CONTROL,\n        SRV_PROTO_TEST,\n        SRV_ROLE_MANAGER,\n        SRV_SETTINGS,\n        SRV_LOGGER,\n    ]\n    const eventFilter = (ev: JDEvent) =>\n        ev.code !== SystemEvent.StatusCodeChanged\n    const services = useServices({ ignoreSelf: true, specification: true })\n        .filter(srv => excludedServices.indexOf(srv.serviceClass) < 0)\n        .filter(srv => srv.events.some(eventFilter))\n    const events = arrayConcatMany(\n        services.map(service => service.events.filter(eventFilter))\n    )\n\n    const handleClickEvent = (newEvent: JDEvent) => () =>\n        setEvent(event === newEvent ? undefined : newEvent)\n\n    const handleKeyChange = (\n        newSelector: number,\n        newModifiers: HidKeyboardModifiers\n    ) => {\n        setSelector(newSelector)\n        setModifiers(newModifiers)\n    }\n    const disabled = !event || !selector\n    const handleAdd = () => onAdd({ eventId: event.id, selector, modifiers })\n\n    return (\n        <Grid container spacing={2}>\n            {!events?.length && (\n                <Grid item xs={12}>\n                    <Alert severity=\"info\">\n                        Connect your devices to bind keyboard commands.\n                    </Alert>\n                </Grid>\n            )}\n            {events\n                .filter(ev => !event || ev === event)\n                .map(ev => (\n                    <Grid item xs={12} sm={6} lg={4} xl={3} key={ev.id}>\n                        <Card>\n                            <DeviceCardHeader\n                                device={ev.service.device}\n                                showAvatar={true}\n                            />\n                            <CardContent>\n                                <Typography variant=\"h5\">\n                                    {ev.service.name}\n                                </Typography>\n                                <Typography variant=\"h4\">\n                                    {humanify(ev.name)}\n                                </Typography>\n                            </CardContent>\n                            <CardActions>\n                                <Button\n                                    onClick={handleClickEvent(ev)}\n                                    variant={\"outlined\"}\n                                >\n                                    {ev === event ? \"unselect\" : \"select\"}\n                                </Button>\n                            </CardActions>\n                        </Card>\n                    </Grid>\n                ))}\n            {event && (\n                <>\n                    <GridHeader title=\"Enter your keyboard/mouse command\" />\n                    <Grid item xs={12}>\n                        <KeyboardKeyInput\n                            selector={selector}\n                            modifiers={modifiers}\n                            onChange={handleKeyChange}\n                        />\n                    </Grid>\n                </>\n            )}\n            {!disabled && (\n                <>\n                    <GridHeader title=\"Save your binding\" />\n                    <Grid item xs={12}>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            disabled={disabled}\n                            onClick={handleAdd}\n                        >\n                            Save binding\n                        </Button>\n                    </Grid>\n                </>\n            )}\n        </Grid>\n    )\n}\n\nexport default function HIDEvents() {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { setError } = useContext(AppContext)\n    const settingsServices = useServices({ serviceClass: SRV_SETTINGS })\n    const [settingsService, setSettingsService] = useState<JDService>()\n    const [hidEvents, setHIDEvents] = useState<HIDEvent[]>([])\n    const [open, setOpen] = useState(false)\n    const gridBreakpoints = useGridBreakpoints()\n    const exportRef = useRef()\n\n    const handleOpenAdd = () => setOpen(true)\n    const handleCloseAdd = () => setOpen(false)\n\n    const factory = useCallback(srv => new SettingsClient(srv), [])\n    const settings = useServiceClient(settingsService, factory)\n\n    useServiceProviderFromServiceClass(SRV_SETTINGS)\n    useChange(settings, async () => {\n        const hes: HIDEvent[] = []\n        if (settings) {\n            const all = await settings.list()\n            for (const kv of all.filter(entry =>\n                entry.key?.startsWith(PREFIX)\n            )) {\n                const { key, value } = kv\n                const he = bufferToHIDEvent(key, value, bus)\n                if (he) hes.push(he)\n            }\n        }\n        if (JSON.stringify(hes) !== JSON.stringify(hidEvents)) setHIDEvents(hes)\n    })\n    const handleAdd = async (hidEvent: HIDEvent) => {\n        setOpen(false)\n\n        const event = bus.node(hidEvent.eventId) as JDEvent\n        if (!event) return\n\n        const payload = HIDEventToBuffer(event, hidEvent)\n        settings.setValue(PREFIX + randomDeviceId(), payload)\n    }\n    const handleRemoveBinding = (index: number) => () => {\n        const { key } = hidEvents[index]\n        if (key) settings.deleteValue(key)\n    }\n    const handleSelectSettingsService = (service: JDService) => () =>\n        setSettingsService(settingsService === service ? undefined : service)\n\n    const exportUri =\n        hidEvents &&\n        `data:application/json;charset=UTF-8,${encodeURIComponent(\n            JSON.stringify(\n                clone(hidEvents).map(h => {\n                    delete h.key\n                    return h\n                })\n            )\n        )}`\n    useEffect(() => {\n        if (exportRef.current)\n            (exportRef.current as HTMLAnchorElement).download = \"bindings.json\"\n    }, [exportRef.current])\n    const handleFilesUploaded = async (files: File[]) => {\n        for (const file of files) {\n            try {\n                const text = await file.text()\n                const json = JSON.parse(text)\n                if (Array.isArray(json)) {\n                    for (const hidEvent of json as HIDEvent[]) {\n                        const event = bus.node(hidEvent.eventId) as JDEvent\n                        if (event) {\n                            const payload = HIDEventToBuffer(event, hidEvent)\n                            settings.setValue(\n                                PREFIX + randomDeviceId(),\n                                payload\n                            )\n                        }\n                    }\n                }\n            } catch (e) {\n                console.warn(e)\n                setError(`invalid file ${file.name}`)\n            }\n        }\n    }\n    return (\n        <>\n            <h1>Accessibility Adapter</h1>\n            <Grid container spacing={1}>\n                <GridHeader title=\"Select an adapter\" />\n                {!settingsServices?.length && (\n                    <Grid item xs>\n                        <ConnectAlert serviceClass={SRV_SETTINGS} />\n                    </Grid>\n                )}\n                {settingsServices\n                    .filter(srv => !settingsService || srv === settingsService)\n                    .map(srv => (\n                        <Grid item key={srv.id} {...gridBreakpoints}>\n                            <Card>\n                                <DeviceCardHeader\n                                    device={srv.device}\n                                    showAvatar={true}\n                                    showMedia={true}\n                                />\n                                <CardActions>\n                                    <Button\n                                        variant={\"outlined\"}\n                                        onClick={handleSelectSettingsService(\n                                            srv\n                                        )}\n                                    >\n                                        {settingsService === srv\n                                            ? \"unselect\"\n                                            : \"select\"}\n                                    </Button>\n                                </CardActions>\n                            </Card>\n                        </Grid>\n                    ))}\n                {settings && (\n                    <>\n                        <GridHeader title=\"Command Bindings\" />\n                        {!hidEvents?.length && (\n                            <Grid item xs>\n                                <Alert severity=\"info\">\n                                    No bindings yet! Click{\" \"}\n                                    <strong>Add binding</strong> to start\n                                    building your adapter.\n                                </Alert>\n                            </Grid>\n                        )}\n                        {hidEvents\n                            ?.map(({ eventId, selector, modifiers }) => ({\n                                eventId,\n                                event: bus.node(eventId) as JDEvent,\n                                selector,\n                                modifiers,\n                            }))\n                            .map(\n                                (\n                                    { eventId, event, selector, modifiers },\n                                    index\n                                ) => (\n                                    <Grid\n                                        item\n                                        {...gridBreakpoints}\n                                        key={eventId}\n                                    >\n                                        <Card>\n                                            <DeviceCardHeader\n                                                device={event?.service.device}\n                                                showAvatar={true}\n                                            />\n                                            <CardContent>\n                                                {event ? (\n                                                    <Typography variant=\"h6\">\n                                                        {`${\n                                                            event.service.name\n                                                        } ${humanify(\n                                                            event.name\n                                                        )}`}\n                                                    </Typography>\n                                                ) : (\n                                                    <Alert severity=\"warning\">\n                                                        <AlertTitle>\n                                                            Device not found\n                                                        </AlertTitle>\n                                                    </Alert>\n                                                )}\n\n                                                <Typography variant=\"h5\">\n                                                    {renderKeyboardKey(\n                                                        selector,\n                                                        modifiers,\n                                                        true\n                                                    )}\n                                                </Typography>\n                                            </CardContent>\n                                            <CardActions>\n                                                <IconButtonWithTooltip\n                                                    title={\"Remove binding\"}\n                                                    onClick={handleRemoveBinding(\n                                                        index\n                                                    )}\n                                                >\n                                                    <DeleteIcon />\n                                                </IconButtonWithTooltip>\n                                            </CardActions>\n                                        </Card>\n                                    </Grid>\n                                )\n                            )}\n                        <Grid item xs={12}>\n                            <Grid container spacing={1}>\n                                <Grid item>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={handleOpenAdd}\n                                    >\n                                        Add binding\n                                    </Button>\n                                </Grid>\n                                <Grid item>\n                                    <Button\n                                        ref={exportRef}\n                                        variant=\"outlined\"\n                                        href={exportUri}\n                                    >\n                                        Export\n                                    </Button>\n                                </Grid>\n                                <Grid item>\n                                    <Suspense>\n                                        <ImportButton\n                                            icon={false}\n                                            text=\"Import\"\n                                            onFilesUploaded={\n                                                handleFilesUploaded\n                                            }\n                                            acceptedFiles={[\"application/json\"]}\n                                        />\n                                    </Suspense>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </>\n                )}\n            </Grid>\n            <Dialog\n                open={open}\n                onClose={handleCloseAdd}\n                maxWidth={\"lg\"}\n                fullWidth={true}\n            >\n                <DialogTitle>Add binding</DialogTitle>\n                <DialogContent>\n                    <SelectHIDEvent onAdd={handleAdd} />\n                </DialogContent>\n            </Dialog>\n        </>\n    )\n}\n","parent":{"name":"hid-events","ext":".tsx"}},{"content":"import React, { useEffect, useState } from \"react\"\nimport {\n    REPORT_UPDATE,\n    SRV_LIGHT_LEVEL,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport { throttle } from \"../../../jacdac-ts/src/jdom/utils\"\nimport useServices from \"../../components/hooks/useServices\"\nimport GridHeader from \"../../components/ui/GridHeader\"\nimport { Button } from \"gatsby-theme-material-ui\"\nimport {\n    Card,\n    CardActions,\n    CardContent,\n    Grid,\n    FormControl,\n    FormControlLabel,\n    FormLabel,\n    Radio,\n    RadioGroup,\n    Typography,\n} from \"@material-ui/core\"\nimport ConnectAlert from \"../../components/alert/ConnectAlert\"\nimport DeviceCardHeader from \"../../components/DeviceCardHeader\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport useBuzzerPlayTone from \"../../components/hooks/useBuzzerPlayTone\"\nimport Dashboard from \"../../components/dashboard/Dashboard\"\nimport JDDevice from \"../../../jacdac-ts/src/jdom/device\"\nimport { useId } from \"react-use-id-hook\"\n\nconst TONE_DURATION = 50\nconst TONE_THROTTLE = 100\n\n// this is a React component that gets run numerous time,\n// whenever a change is detected in the React state\n// for example, useServices is a hook that tracks the light level services,\n// so it will render again and update the light array whenever the bus connects/disconnects\n// a light sensor\nexport default function LightsensorAccessible() {\n    const { playTone, toggleBrowserAudio, browserAudio } = useBuzzerPlayTone()\n\n    // identifiers for accessibility\n    const sectionId = useId()\n\n    // useServices accepts a number of filters and returns any services that match\n    // get all led light sensor services\n    // under the hood, it uses the bus and events.\n    const lightSensors = useServices({ serviceClass: SRV_LIGHT_LEVEL })\n    console.log(\"light sensors: \" + lightSensors)\n\n    // create a state variable to hold the service selected as our light sensor\n    // when using setLightService, React will render again this component\n    const [lightService, setLightService] = useState<JDService>()\n\n    //used to hold user selection of the property of the sound to vary. Default is the frequency.\n    const [sonificationProperty, setSonificationProperty] =\n        useState(\"frequency\")\n\n    const handleSelectLightService = light => () => {\n        console.log(light)\n        lightService == light\n            ? setLightService(undefined)\n            : setLightService(light)\n    }\n    //handler for property selection to sonify.\n    const handlePropertySelectionChange = event => {\n        setSonificationProperty(event.target.value)\n    }\n\n    // filter to only show light sensors in dashboard\n    const dashboardDeviceFilter = (d: JDDevice) => d.hasService(SRV_LIGHT_LEVEL)\n\n    // register for light sensor data events\n    useEffect(() => {\n        // ?. checks that the callee is defined\n        const unsubs = lightService?.readingRegister.subscribe(\n            REPORT_UPDATE,\n            // don't trigger more than every 100ms\n            throttle(async () => {\n                // get amount of light\n                //console.log(lightService.readingRegister.unpackedValue)\n                const [lightLevel] = lightService.readingRegister.unpackedValue\n                let volume = 1\n                let toneFrequencyOffset = 0\n                if (sonificationProperty == \"frequency\") {\n                    toneFrequencyOffset = lightLevel\n                } else {\n                    volume = lightLevel % 0.99\n                }\n\n                await playTone(\n                    1000 + toneFrequencyOffset * 1000,\n                    TONE_DURATION,\n                    volume\n                )\n            }, TONE_THROTTLE)\n        )\n\n        // cleanup callback\n        return () => unsubs?.()\n    }, [lightService, playTone]) // re-register if light sensor changes\n\n    return (\n        <>\n            <section id={sectionId}>\n                <Grid container spacing={2}>\n                    <GridHeader title=\"Audio controls\" />\n                    <Grid item xs={12}>\n                        <Button\n                            variant={\"outlined\"}\n                            onClick={toggleBrowserAudio}\n                        >\n                            {browserAudio\n                                ? \"Stop browser audio\"\n                                : \"Start browser audio\"}\n                        </Button>\n                        {!lightSensors && (\n                            <>\n                                <GridHeader title=\"Connect a device\" />\n                                <Grid item xs>\n                                    <ConnectAlert\n                                        serviceClass={SRV_LIGHT_LEVEL}\n                                    />\n                                </Grid>\n                            </>\n                        )}\n                        {lightSensors.length && (\n                            <>\n                                <GridHeader title=\"Available Lightsensors\" />\n                                {lightSensors.map(lightSensor => (\n                                    <Grid\n                                        item\n                                        xs={12}\n                                        sm={6}\n                                        lg={4}\n                                        xl={3}\n                                        key={lightSensor.id}\n                                    >\n                                        <Card>\n                                            <DeviceCardHeader\n                                                device={lightSensor.device}\n                                                showAvatar={true}\n                                                showMedia={true}\n                                            />\n                                        </Card>\n                                        <CardContent>\n                                            <Typography variant=\"h5\">\n                                                {(lightSensor === lightService\n                                                    ? \"Streaming from \"\n                                                    : \"\") +\n                                                    (lightSensor.device\n                                                        .isPhysical\n                                                        ? \"Physical\"\n                                                        : \"Virtual\") +\n                                                    `LightSensor ${lightSensor.friendlyName}`}\n                                            </Typography>\n                                        </CardContent>\n                                        <CardActions>\n                                            <FormControl component=\"fieldset\">\n                                                <FormLabel component=\"legend\">\n                                                    Select property of sound to\n                                                    change\n                                                </FormLabel>\n                                                <RadioGroup\n                                                    aria-label=\"sonification property\"\n                                                    name=\"soundProperty\"\n                                                    value={sonificationProperty}\n                                                    onChange={\n                                                        handlePropertySelectionChange\n                                                    }\n                                                >\n                                                    <FormControlLabel\n                                                        value=\"frequency\"\n                                                        control={<Radio />}\n                                                        label=\"buzzer frequency\"\n                                                    />\n                                                    <FormControlLabel\n                                                        value=\"volume\"\n                                                        control={<Radio />}\n                                                        label=\"buzzer volume\"\n                                                    />\n                                                </RadioGroup>\n                                            </FormControl>\n                                            <Button\n                                                variant={\"outlined\"}\n                                                onClick={handleSelectLightService(\n                                                    lightSensor\n                                                )}\n                                            >\n                                                {lightSensor === lightService\n                                                    ? \"Stop streaming\"\n                                                    : \"Start streaming\"}\n                                            </Button>\n                                        </CardActions>\n                                    </Grid>\n                                ))}\n                            </>\n                        )}\n                    </Grid>\n                </Grid>\n            </section>\n            <Dashboard deviceFilter={dashboardDeviceFilter} />\n        </>\n    )\n}\n","parent":{"name":"lightsensor-accessible","ext":".tsx"}},{"content":"import React, { useContext, useEffect } from \"react\"\nimport {\n    createTheme,\n    createStyles,\n    responsiveFontSizes,\n} from \"@material-ui/core\"\nimport ThemedLayout from \"../../components/ui/ThemedLayout\"\nimport MakeCodeEditorExtension from \"../../components/makecode/MakeCodeEditorExtension\"\nimport { makeStyles } from \"@material-ui/core\"\nimport PaperBox from \"../../components/ui/PaperBox\"\nimport DarkModeContext from \"../../components/ui/DarkModeContext\"\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        content: {\n            display: \"flex\",\n            minHeight: \"100vh\",\n            minWidth: \"10rem\",\n            flexDirection: \"column\",\n            padding: theme.spacing(3),\n            transition: theme.transitions.create(\"margin\", {\n                easing: theme.transitions.easing.sharp,\n                duration: theme.transitions.duration.leavingScreen,\n            }),\n            flexGrow: 1,\n        },\n    })\n)\n\nexport default function MakeCodeEditorExtensionPage() {\n    const { toggleDarkMode, darkModeMounted } = useContext(DarkModeContext)\n    const rawTheme = createTheme({\n        palette: {\n            primary: {\n                main: \"#2e7d32\",\n            },\n            secondary: {\n                main: \"#ffc400\",\n            },\n            contrastThreshold: 5.1,\n            type: \"dark\",\n        },\n    })\n    const classes = useStyles()\n    const theme = responsiveFontSizes(rawTheme)\n    useEffect(() => {\n        if (darkModeMounted) toggleDarkMode(\"light\")\n    }, [darkModeMounted])\n    return (\n        <ThemedLayout theme={theme}>\n            <div className={classes.content}>\n                <PaperBox>\n                    <MakeCodeEditorExtension />\n                </PaperBox>\n            </div>\n        </ThemedLayout>\n    )\n}\n","parent":{"name":"makecode-editor-extension","ext":".tsx"}},{"content":"import React, { useContext, useEffect } from \"react\"\nimport {\n    Box,\n    Button,\n    createTheme,\n    responsiveFontSizes,\n} from \"@material-ui/core\"\nimport ThemedLayout from \"../../components/ui/ThemedLayout\"\nimport JDDevice from \"../../../jacdac-ts/src/jdom/device\"\nimport { isReading, isValueOrIntensity } from \"../../../jacdac-ts/src/jdom/spec\"\nimport { strcmp } from \"../../../jacdac-ts/src/jdom/utils\"\nimport MakeCodeIcon from \"../../components/icons/MakeCodeIcon\"\nimport Helmet from \"react-helmet\"\nimport Dashboard from \"../../components/dashboard/Dashboard\"\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport useChange from \"../../jacdac/useChange\"\nimport DarkModeContext from \"../../components/ui/DarkModeContext\"\nimport IFrameBridgeClient from \"../../components/makecode/iframebridgeclient\"\n\nfunction deviceSort(l: JDDevice, r: JDDevice): number {\n    const srvScore = (srv: jdspec.ServiceSpec) =>\n        srv.packets.reduce(\n            (prev, pkt) =>\n                prev + (isReading(pkt) ? 10 : isValueOrIntensity(pkt) ? 1 : 0),\n            0\n        ) || 0\n    const score = (srvs: jdspec.ServiceSpec[]) =>\n        srvs.reduce((prev, srv) => srvScore(srv), 0)\n\n    const ls = score(\n        l\n            .services()\n            .slice(1)\n            .map(srv => srv.specification)\n            .filter(spec => !!spec)\n    )\n    const rs = score(\n        r\n            .services()\n            .slice(1)\n            .map(srv => srv.specification)\n            .filter(spec => !!spec)\n    )\n    if (ls !== rs) return -ls + rs\n    return strcmp(l.deviceId, r.deviceId)\n}\n\nfunction Carousel() {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const iframeBridge = bus.nodeData[\n        IFrameBridgeClient.DATA_ID\n    ] as IFrameBridgeClient\n    const deviceFilter = iframeBridge.deviceFilter.bind(iframeBridge)\n    const serviceFilter = iframeBridge.serviceFilter.bind(iframeBridge)\n    const extensions = useChange(iframeBridge, _ => _?.candidateExtensions)\n    const handleAdd = () => iframeBridge?.postAddExtensions()\n\n    return (\n        <>\n            <Dashboard\n                showHeader={false}\n                deviceSort={deviceSort}\n                deviceFilter={deviceFilter}\n                serviceFilter={serviceFilter}\n                showStartSimulators={false}\n            />\n            {!!extensions?.length && (\n                <Box m={1}>\n                    <Button\n                        size=\"medium\"\n                        color=\"primary\"\n                        variant=\"contained\"\n                        startIcon={<MakeCodeIcon />}\n                        onClick={handleAdd}\n                        aria-label={\"Add blocks\"}\n                    >\n                        Add blocks\n                    </Button>\n                </Box>\n            )}\n        </>\n    )\n}\n\nexport default function Page() {\n    const { toggleDarkMode, darkModeMounted } = useContext(DarkModeContext)\n    const rawTheme = createTheme({\n        palette: {\n            primary: {\n                main: \"#63c\",\n            },\n            secondary: {\n                main: \"#ffc400\",\n            },\n            type: \"light\",\n            contrastThreshold: 3.1,\n        },\n    })\n    const theme = responsiveFontSizes(rawTheme)\n\n    useEffect(() => {\n        if (darkModeMounted) toggleDarkMode(\"light\")\n    }, [darkModeMounted])\n\n    return (\n        <ThemedLayout theme={theme}>\n            <Helmet>\n                <style>\n                    {`\nhtml {\n    margin-right: 4px;\n}\nhtml, body {\n    background: transparent !important;\n    overflow: hidden !important;\n}\n`}\n                </style>\n            </Helmet>\n            <Carousel />\n        </ThemedLayout>\n    )\n}\n","parent":{"name":"makecode-sim","ext":".tsx"}},{"content":"import React from \"react\"\nimport ModelEditor from \"../../components/model-editor/ModelEditor\"\n\nexport default function Page() {\n    return <ModelEditor />\n}\n","parent":{"name":"model-editor","ext":".tsx"}},{"content":"import { List, ListItem, ListItemText, Typography } from \"@material-ui/core\"\nimport React, { lazy, useContext, useState } from \"react\"\nimport {\n    SRV_SENSOR_AGGREGATOR,\n    SRV_MODEL_RUNNER,\n    ModelRunnerReg,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport ServiceList from \"../../components/ServiceList\"\nimport ConnectAlert from \"../../components/alert/ConnectAlert\"\nimport { useDbJSON, useDbUint8Array } from \"../../components/useDb\"\nimport Alert from \"../../components/ui/Alert\"\nimport { Button } from \"gatsby-theme-material-ui\"\nimport ModelRunnerClient from \"../../../jacdac-ts/src/clients/modelrunnerclient\"\nimport RegisterInput from \"../../components/RegisterInput\"\nimport CircularProgressWithLabel from \"../../components/ui/CircularProgressWithLabel\"\nimport SensorAggregatorClient, {\n    SensorAggregatorConfig,\n} from \"../../../jacdac-ts/src/clients/sensoraggregatorclient\"\nimport SensorAggregatorConfigView from \"../../components/SensorAggregatorConfigView\"\nimport ServiceManagerContext from \"../../components/ServiceManagerContext\"\nimport useChange from \"../../jacdac/useChange\"\nimport { IFile } from \"../../../jacdac-ts/src/embed/protocol\"\nimport { prettySize } from \"../../../jacdac-ts/src/jdom/pretty\"\nimport RegisterTrend from \"../../components/RegisterTrend\"\nimport { useRegisterUnpackedValue } from \"../../jacdac/useRegisterValue\"\nimport useCall from \"../../components/useCall\"\n\nimport Suspense from \"../../components/ui/Suspense\"\nimport { Link } from \"@material-ui/icons\"\nimport useRegister from \"../../components/hooks/useRegister\"\nconst ImportButton = lazy(() => import(\"../../components/ImportButton\"))\n\nexport function ModelContent(props: { service: JDService }) {\n    const { service } = props\n\n    const modelSizeRegister = useRegister(service, ModelRunnerReg.ModelSize)\n    const lastErrorRegister = useRegister(service, ModelRunnerReg.LastError)\n    const autoInvokeEveryRegister = useRegister(\n        service,\n        ModelRunnerReg.AutoInvokeEvery\n    )\n    const outputsRegister = useRegister(service, ModelRunnerReg.Outputs)\n\n    const [modelSize] = useRegisterUnpackedValue<[number]>(modelSizeRegister)\n    const [lastError] = useRegisterUnpackedValue<[number]>(lastErrorRegister)\n\n    return (\n        <>\n            {lastError && <Alert severity=\"warning\">{lastError}</Alert>}\n            <Typography>\n                model size:{\" \"}\n                {modelSize === undefined ? \"...\" : prettySize(modelSize)}\n            </Typography>\n            <RegisterInput register={autoInvokeEveryRegister} visible={true} />\n            <RegisterTrend showName register={outputsRegister} mini={true} />\n        </>\n    )\n}\n\nexport function ModelActions(props: {\n    service: JDService\n    model: Uint8Array\n    sensorAggregatorService?: JDService\n    sensorInput?: SensorAggregatorConfig\n}) {\n    const { service, model, sensorAggregatorService, sensorInput } = props\n    const { running, progress, alert, callAsync } = useCall()\n\n    const modelDisabled = !service || !model || running\n\n    const handleDeployModel = async () =>\n        await callAsync(async setProgress => {\n            if (sensorAggregatorService && sensorInput) {\n                const aggregator = new SensorAggregatorClient(\n                    sensorAggregatorService\n                )\n                await aggregator.setInputs(sensorInput)\n            }\n            if (service && model) {\n                const runner = new ModelRunnerClient(service)\n                await runner.deployModel(model, setProgress)\n            }\n        })\n\n    return (\n        <>\n            {!running && (\n                <Button\n                    disabled={modelDisabled}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleDeployModel}\n                >\n                    {sensorInput\n                        ? \"Deploy model and configuration\"\n                        : \"Deploy model\"}\n                </Button>\n            )}\n            {running && <CircularProgressWithLabel value={progress * 100} />}\n            {alert}\n        </>\n    )\n}\n\nexport default function ModelUploader() {\n    const [importing, setImporting] = useState(false)\n    const { data: model, setBlob: setModel } = useDbUint8Array(\"model.tflite\")\n    const { value: sensorConfig, setBlob: setSensorConfig } =\n        useDbJSON<SensorAggregatorConfig>(\"sensor-input.json\")\n    const { modelStore } = useContext(ServiceManagerContext)\n\n    const handleTfmodelFiles = async (files: File[]) => {\n        const file = files[0]\n        if (file) {\n            try {\n                setImporting(true)\n                await setModel(file)\n            } finally {\n                setImporting(false)\n            }\n        }\n    }\n    const handleClearModel = async () => {\n        try {\n            setImporting(true)\n            await setModel(undefined)\n        } finally {\n            setImporting(false)\n        }\n    }\n    const handleSensorConfigFiles = async (files: File[]) => {\n        const file = files[0]\n        if (file) {\n            try {\n                setImporting(true)\n                await setSensorConfig(file)\n            } finally {\n                setImporting(false)\n            }\n        }\n    }\n    const handleClearConfiguration = async () => {\n        try {\n            setImporting(true)\n            await setSensorConfig(undefined)\n        } finally {\n            setImporting(false)\n        }\n    }\n    const handleLoadModel = (model: IFile) => async () => {\n        try {\n            setImporting(true)\n            console.log(`loading model`, model)\n            const blob = await modelStore.loadFile(model)\n            console.log(`loaded content`, blob)\n            if (blob) {\n                setModel(blob)\n            }\n        } finally {\n            setImporting(false)\n        }\n    }\n    const handleLoadInputConfiguration = (model: IFile) => async () => {\n        try {\n            setImporting(true)\n            console.log(`loading model`, model)\n            const blob = await modelStore.loadFile(model)\n            console.log(`loaded content`, blob)\n            if (blob) {\n                setSensorConfig(blob)\n            }\n        } finally {\n            setImporting(false)\n        }\n    }\n\n    const models = useChange(modelStore, _ => _?.models())\n    const inputConfigurations = useChange(modelStore, _ =>\n        _?.inputConfigurations()\n    )\n\n    return (\n        <>\n            <h1>Model uploader</h1>\n            <p>\n                Upload Machine Learning Models (like TensorFlow Lite) into your{\" \"}\n                <Link to=\"/services/model-runner/\">ML module runners</Link>.\n            </p>\n            <h3>Load a machine learning model</h3>\n            <p>\n                Machine learning models are typically stored in a{\" \"}\n                <code>.tflite</code> file.\n            </p>\n            {model && (\n                <Alert severity={\"success\"}>\n                    Model loaded ({prettySize(model.byteLength)})\n                </Alert>\n            )}\n            {model && <p />}\n            <Suspense>\n                <ImportButton\n                    disabled={importing}\n                    text={\"Import model\"}\n                    onFilesUploaded={handleTfmodelFiles}\n                />\n            </Suspense>\n            <Button\n                aria-label=\"clear model\"\n                disabled={importing}\n                onClick={handleClearModel}\n            >\n                clear model\n            </Button>\n            {models?.length && (\n                <List>\n                    {models.map(model => (\n                        <ListItem\n                            key={model.path}\n                            button\n                            onClick={handleLoadModel(model)}\n                        >\n                            <ListItemText\n                                primary={model.name}\n                                secondary={`${model.path} ${prettySize(\n                                    model.size\n                                )}`}\n                            />\n                        </ListItem>\n                    ))}\n                </List>\n            )}\n            <h3>Configure sensors</h3>\n            <p>\n                Sensor configuration files are stored in a <code>.jd.json</code>{\" \"}\n                file.\n            </p>\n            {sensorConfig && (\n                <Alert severity={\"success\"}>Sensor configuration loaded</Alert>\n            )}\n            {sensorConfig && (\n                <SensorAggregatorConfigView config={sensorConfig} />\n            )}\n            {sensorConfig && <p />}\n            <Suspense>\n                <ImportButton\n                    disabled={importing}\n                    text={\"Import configuration\"}\n                    onFilesUploaded={handleSensorConfigFiles}\n                />\n            </Suspense>\n            <Button\n                aria-label=\"clear configuration\"\n                disabled={importing}\n                onClick={handleClearConfiguration}\n            >\n                clear configuration\n            </Button>\n            {inputConfigurations?.length && (\n                <List>\n                    {inputConfigurations.map(iconfig => (\n                        <ListItem\n                            key={iconfig.path}\n                            button\n                            onClick={handleLoadInputConfiguration(iconfig)}\n                        >\n                            <ListItemText\n                                primary={iconfig.name}\n                                secondary={`${iconfig.path} ${prettySize(\n                                    iconfig.size\n                                )}`}\n                            />\n                        </ListItem>\n                    ))}\n                </List>\n            )}\n            <h3>Deploy model to machine learning services</h3>\n            <ConnectAlert serviceClass={SRV_MODEL_RUNNER} />\n            <ServiceList\n                serviceClass={SRV_MODEL_RUNNER}\n                content={service => <ModelContent service={service} />}\n                actions={service => (\n                    <ModelActions\n                        service={service}\n                        model={model}\n                        sensorAggregatorService={\n                            service?.device.services({\n                                serviceClass: SRV_SENSOR_AGGREGATOR,\n                            })?.[0]\n                        }\n                        sensorInput={sensorConfig}\n                    />\n                )}\n            />\n        </>\n    )\n}\n","parent":{"name":"model-uploader","ext":".tsx"}},{"content":"import React from \"react\"\nimport PacketInspector from \"../../components/tools/PacketInspector\"\n\nexport default function Page() {\n    return <PacketInspector />;\n}","parent":{"name":"packet-inspector","ext":".tsx"}},{"content":"import {\n    NoSsr,\n} from \"@material-ui/core\"\nimport React, { lazy } from \"react\"\nimport Suspense from \"../../components/ui/Suspense\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\n\nconst PeerConfiguration = lazy(\n    () => import(\"../../components/peer/PeerConfiguration\")\n)\n\nexport default function PeerView() {\n    // client only page\n    return (\n        <NoSsr>\n            <Suspense>\n                <PeerConfiguration />\n            </Suspense>\n        </NoSsr>\n    )\n}\n","parent":{"name":"peers","ext":".tsx"}},{"content":"import { Grid, Switch, Typography } from \"@material-ui/core\"\nimport React, { useContext, useEffect, useState } from \"react\"\nimport {\n    bufferEq,\n    pick,\n    randomRange,\n    toHex,\n} from \"../../../jacdac-ts/src/jdom/utils\"\n// tslint:disable-next-line: no-submodule-imports match-default-export-name\nimport JacdacContext, { JacdacContextProps } from \"../../jacdac/Context\"\nimport {\n    ProtoTestCmd,\n    ProtoTestReg,\n    SRV_PROTO_TEST,\n} from \"../../../jacdac-ts/src/jdom/constants\"\nimport useChange from \"../../jacdac/useChange\"\nimport JDService from \"../../../jacdac-ts/src/jdom/service\"\nimport JDRegister from \"../../../jacdac-ts/src/jdom/register\"\nimport ConnectAlert from \"../../components/alert/ConnectAlert\"\nimport JDField from \"../../../jacdac-ts/src/jdom/field\"\nimport {\n    jdpack,\n    jdpackEqual,\n    jdunpack,\n    PackedValues,\n} from \"../../../jacdac-ts/src/jdom/pack\"\nimport DeviceName from \"../../components/devices/DeviceName\"\nimport DeviceActions from \"../../components/DeviceActions\"\nimport useEffectAsync from \"../../components/useEffectAsync\"\nimport TestCard from \"../../components/TestCard\"\nimport Packet from \"../../../jacdac-ts/src/jdom/packet\"\nimport JDEvent from \"../../../jacdac-ts/src/jdom/event\"\nimport { AlertTitle } from \"@material-ui/lab\"\nimport Alert from \"../../components/ui/Alert\"\nimport JDServiceProvider from \"../../../jacdac-ts/src/jdom/servers/serviceprovider\"\nimport ProtocolTestServer from \"../../../jacdac-ts/src/jdom/servers/protocoltestserver\"\nimport { Link } from \"gatsby-theme-material-ui\"\nimport { cryptoRandomUint32 } from \"../../../jacdac-ts/src/jdom/random\"\n\nfunction randomFieldPayload(field: JDField) {\n    const { specification } = field\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let r: any = undefined\n    switch (specification.type) {\n        case \"bool\":\n            r = Math.random() > 0.5 ? 1 : 0\n            break\n        case \"i8\":\n        case \"i16\":\n        case \"i32\":\n        case \"u8\":\n        case \"u16\":\n        case \"u32\": {\n            const unsigned = specification.type[0] === \"u\"\n            const n = Math.min(30, parseInt(specification.type.slice(1)))\n            const min = pick(\n                specification.typicalMin,\n                specification.absoluteMin,\n                unsigned ? 0 : -((1 << (n - 1)) - 1)\n            )\n            const max = pick(\n                specification.typicalMax,\n                specification.absoluteMax,\n                unsigned ? (1 << n) - 1 : (1 << (n - 1)) - 1\n            )\n            r = randomRange(min, max)\n            break\n        }\n        case \"bytes\": {\n            // maxBytes?\n            const a = cryptoRandomUint32(randomRange(1, 3))\n            r = new Uint8Array(a.buffer)\n            break\n        }\n        case \"string\":\n        case \"string0\": {\n            const ch_a = \"a\".charCodeAt(0)\n            const ch_z = \"z\".charCodeAt(0)\n            const n = randomRange(4, 10)\n            let s = \"\"\n            for (let i = 0; i < n; ++i) {\n                s += String.fromCharCode(randomRange(ch_a, ch_z))\n            }\n            r = s\n            break\n        }\n    }\n\n    return r\n}\n\nfunction randomPayload<T extends PackedValues>(\n    packFormat: string,\n    fields: JDField[]\n): T {\n    if (!packFormat) throw new Error(\"pack format unknown\")\n    const rs = fields.map(randomFieldPayload)\n    if (rs.some(r => r === undefined))\n        throw new Error(\"unsupported data layout\")\n    return rs as T\n}\n\nfunction RegisterProtocolTest(props: {\n    rw: JDRegister\n    ro: JDRegister\n    ev: JDEvent\n}) {\n    const { rw, ro, ev } = props\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const { specification, fields } = rw\n    const name = specification.name.replace(/^rw_/, \"\")\n\n    // event code and command code are the same as rw register\n    useEffectAsync(async () => {\n        await rw.sendGetAsync()\n        await ro.sendGetAsync()\n    }, [])\n\n    const testRwRo = async log => {\n        log(`-- testing rw`)\n        const packFormat = specification.packFormat\n        const payload = randomPayload(packFormat, fields)\n        log({ payload })\n\n        const data = jdpack(packFormat, payload)\n        log({ data: toHex(data) })\n\n        // setup observer for event counts\n        const evCount = ev.count\n\n        // send over packet\n        await rw.sendSetAsync(data)\n        // read packet\n        await rw.sendGetAsync()\n        // wait for response\n        await bus.delay(100)\n        // check read\n        log({ rwdata: toHex(rw.data) })\n        const rwpayload = jdunpack(rw.data, packFormat)\n        log({ rwpayload })\n        if (!jdpackEqual(packFormat, payload, rwpayload))\n            throw new Error(`expected rw ${payload}, got ${rwpayload}`)\n\n        // check ro\n        log(`-- testing ro`)\n        await ro.sendGetAsync()\n        // wait for response\n        await bus.delay(100)\n        const ropayload = jdunpack(ro.data, packFormat)\n        log({ ropayload })\n        if (!jdpackEqual(packFormat, payload, ropayload))\n            throw new Error(`expected ro ${payload}, got ${ropayload}`)\n\n        // the event should have triggered once\n        log(`-- testing event`)\n        if (packFormat !== \"u8\" && evCount + 1 !== ev.count)\n            throw new Error(`expected 1 event, got ${ev.count - evCount}`)\n    }\n\n    const testCommand = async log => {\n        log(`-- testing cmd`)\n\n        const packFormat = specification.packFormat\n        const payload = randomPayload(packFormat, fields)\n        log({ payload })\n        const data = jdpack(packFormat, payload)\n        log({ data: toHex(data) })\n        // send over cmd packet\n        await rw.service.sendPacketAsync(Packet.from(rw.code, data))\n        // read packet\n        await rw.sendGetAsync()\n        // wait for response\n        await bus.delay(100)\n        // check read\n        log({ rwdata: toHex(rw.data) })\n        const rwpayload = jdunpack(rw.data, packFormat)\n        log({ rwpayload })\n        if (!jdpackEqual(packFormat, payload, rwpayload))\n            throw new Error(`expected rw ${payload}, got ${rwpayload}`)\n    }\n\n    const test = async log => {\n        log(`- testing no acks`)\n        rw.service.registersUseAcks = false\n        await testRwRo(log)\n        await testCommand(log)\n        log(`- testing acks`)\n        rw.service.registersUseAcks = true\n        await testRwRo(log)\n        await testCommand(log)\n    }\n\n    return (\n        <TestCard\n            title={name}\n            subheader={specification.packFormat || \"?\"}\n            onTest={test}\n        />\n    )\n}\n\nfunction ServiceProtocolTest(props: { service: JDService }) {\n    const { service } = props\n    const { device } = service\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n\n    const regs = service.registers()\n    const rws = service\n        .registers()\n        .filter(reg => reg.specification.kind == \"rw\")\n        .map(rw => {\n            const roname = rw.name.replace(/^rw_/, \"ro_\")\n            const ro = regs.find(\n                r =>\n                    r.specification.kind === \"ro\" &&\n                    r.specification.name === roname\n            )\n            const ev = service.event(rw.code)\n            return { rw, ro, ev }\n        })\n\n    const outPipeTest = async log => {\n        // fill bytes with data\n        const rw = service.register(ProtoTestReg.RwBytes)\n        const [data] = randomPayload<[Uint8Array]>(\"b\", rw.fields)\n        log(`data: ${toHex(data)}`)\n        // send over cmd packet\n        rw.service.registersUseAcks = true\n        await rw.sendSetAsync(data)\n        await rw.sendGetAsync()\n        // wait for response\n        await bus.delay(100)\n        log(`data recv: ${toHex(rw.data)}`)\n        if (!bufferEq(data, rw.data))\n            throw new Error(\n                `rw write failed, expected ${toHex(data)}, got ${toHex(\n                    rw.data\n                )}`\n            )\n        // read packet back\n        const recv = await service.receiveWithInPipe<[number]>(\n            ProtoTestCmd.CReportPipe,\n            \"u8\"\n        )\n        const recvu = new Uint8Array(recv.map(buf => buf[0]))\n        log(`received ${toHex(recvu)}`)\n        if (!bufferEq(data, recvu))\n            throw new Error(\n                `expected ${toHex(data)}, got ${toHex(recv.map(buf => buf[0]))}`\n            )\n    }\n\n    return (\n        <Grid container spacing={1}>\n            <Grid item xs={10}>\n                <Typography variant=\"h4\">\n                    <DeviceName device={device} />\n                </Typography>\n            </Grid>\n            <Grid item xs={2}>\n                <DeviceActions device={device} showReset={true} />\n            </Grid>\n            {rws?.map(rw => (\n                <Grid key={rw.rw.id} item xs={12} md={6}>\n                    <RegisterProtocolTest {...rw} />\n                </Grid>\n            ))}\n            <Grid key={\"cpipe\"} item xs={12} md={6}>\n                <TestCard\n                    title={\"out pipe\"}\n                    subheader={\"\"}\n                    onTest={outPipeTest}\n                />\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default function ProtocolTest() {\n    const { bus } = useContext<JacdacContextProps>(JacdacContext)\n    const [host, setHost] = useState(false)\n    const services = useChange(bus, b =>\n        b.services({ serviceClass: SRV_PROTO_TEST })\n    )\n\n    const toggleHost = () => setHost(!host)\n\n    // add virtual device\n    useEffect(() => {\n        if (!host) return () => {}\n\n        const d = new JDServiceProvider([new ProtocolTestServer()])\n        bus.addServiceProvider(d)\n        return () => bus.removeServiceProvider(d)\n    }, [host])\n\n    return (\n        <>\n            <h1>Protocol Test</h1>\n            <p>\n                A helper page to test the Jacdac protocol against a &nbsp;\n                <Link to=\"/services/prototest/\">protocol test</Link> service.\n            </p>\n            <Grid container direction=\"row\" spacing={2}>\n                <Grid key=\"connect\" item xs={12}>\n                    <ConnectAlert serviceClass={SRV_PROTO_TEST} />\n                </Grid>\n                {services?.map(service => (\n                    <Grid key={service.id} item xs={12}>\n                        <ServiceProtocolTest service={service} />\n                    </Grid>\n                ))}\n                <Grid item xs={12}>\n                    <Alert severity=\"info\">\n                        <AlertTitle>Developer zone</AlertTitle>\n                        <Switch checked={host} onChange={toggleHost} />\n                        <label>Add simulator</label>\n                    </Alert>\n                </Grid>\n            </Grid>\n        </>\n    )\n}\n","parent":{"name":"prototest","ext":".tsx"}},{"content":"import {\n    Grid,\n    List,\n    ListItem,\n    ListItemText,\n    Switch,\n    TextField,\n} from \"@material-ui/core\"\nimport React, { ChangeEvent, lazy, useState } from \"react\"\nimport { useId } from \"react-use-id-hook\"\nimport Suspense from \"../../components/ui/Suspense\"\nimport { toMap } from \"../../../jacdac-ts/src/jdom/utils\"\nconst SilkQRCode = lazy(() => import(\"../../components/widgets/SilkQrCode\"))\n\nimport { graphql } from \"gatsby\"\nimport { Button } from \"gatsby-theme-material-ui\"\n\nexport const query = graphql`\n    {\n        allQrUrlDeviceMapCsv {\n            nodes {\n                vanityname\n                revision\n                modulename\n                designid\n            }\n        }\n    }\n`\n\nexport default function DeviceQRCodeGenerator(props: {\n    data: {\n        allQrUrlDeviceMapCsv: {\n            nodes: {\n                vanityname: string\n                modulename: string\n                designid: string\n                revision: string\n            }[]\n        }\n    }\n}) {\n    const { data } = props\n    const { nodes } = data.allQrUrlDeviceMapCsv\n    const knowns = toMap(\n        nodes,\n        n => n.vanityname.toUpperCase(),\n        n => n\n    )\n    const [vanity, setVanity] = useState(`AAAAAB`)\n    const [mirror, setMirror] = useState(false)\n    const [size, setSize] = useState(0.3)\n    const handleUrlChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        const vanity = ev.target.value?.toUpperCase()\n        setVanity(vanity)\n    }\n    const handleSizeChange = (ev: ChangeEvent<HTMLInputElement>) => {\n        const s = Number(ev.target.value)\n        if (!isNaN(s)) setSize(s)\n    }\n    const handleMirror = (ev: ChangeEvent<HTMLInputElement>) => {\n        setMirror(!!ev.target.checked)\n    }\n    const mirrorid = useId()\n    const url = !!vanity && `HTTP://AKA.MS/${vanity}`\n    const known = knowns[vanity]\n    const { modulename, designid, revision } = known || {}\n    const handleVanity = (vanityname: string) => () =>\n        setVanity(vanityname.toUpperCase())\n    const handleNextVanity = () => {\n        const next = Object.values(nodes).find(({ designid }) => !designid)\n        if (next) setVanity(next.vanityname.toUpperCase())\n    }\n    return (\n        <>\n            <h1>Silk QR Code generator</h1>\n            <p>\n                Enter a short URL HTTP://AKA.MS/<strong>vanity name</strong> to\n                be encoded as a silk compatible QR code. If you use a link, make\n                sure to update{\" \"}\n                <a href=\"https://github.com/microsoft/jacdac/blob/main/devices/microsoft/research/qr-url-device-map.csv\">\n                    GitHub\n                </a>\n                .\n            </p>\n            <Grid container spacing={1}>\n                <Grid item xs>\n                    <TextField\n                        fullWidth={true}\n                        label=\"vanity name\"\n                        value={vanity}\n                        placeholder=\"AAAAA\"\n                        onChange={handleUrlChange}\n                        helperText={\"HTTP://AKA.MS/...\"}\n                    />\n                </Grid>\n                <Grid item>\n                    <TextField\n                        label=\"block size (cm)\"\n                        type=\"number\"\n                        value={size}\n                        onChange={handleSizeChange}\n                    />\n                </Grid>\n                <Grid item>\n                    <Switch\n                        checked={mirror}\n                        onChange={handleMirror}\n                        aria-labelby={mirrorid}\n                    />\n                    <label id={mirrorid}>mirror</label>\n                </Grid>\n                <Grid item xs>\n                    <Button variant=\"contained\" onClick={handleNextVanity}>\n                        Pick Unassigned\n                    </Button>\n                </Grid>\n            </Grid>\n            <h2>URL</h2>\n            <pre>\n                <a href={url}>{url}</a>\n            </pre>\n            {known && (\n                <>\n                    <h2>Reserved device entry</h2>\n                    <p>\n                        {designid\n                            ? `${designid}: ${modulename} v${revision}`\n                            : `unassigned`}\n                    </p>\n                </>\n            )}\n            <h2>QR codes</h2>\n            <Suspense>\n                <SilkQRCode url={url} mirror={mirror} size={size} />\n            </Suspense>\n            <h2>Preview</h2>\n            <p>\n                If you see bing.com for aka.ms links, it&quot;s likely to be\n                free.\n            </p>\n            <iframe\n                style={{ width: \"100%\", height: \"14rem\", border: \"none\" }}\n                src={url?.replace(/^http:/i, \"HTTPS:\")}\n                sandbox=\"allow-scripts\"\n            />\n            <h2>Known devices</h2>\n            <List>\n                {nodes\n                    .filter(({ designid }) => !!designid)\n                    .map(({ vanityname, modulename, designid, revision }) => (\n                        <ListItem\n                            button\n                            key={vanityname}\n                            onClick={handleVanity(vanityname)}\n                        >\n                            <ListItemText\n                                primary={`${designid}: ${modulename} v${revision}`}\n                                secondary={`aka.ms/${vanityname}`}\n                            />\n                        </ListItem>\n                    ))}\n            </List>\n        </>\n    )\n}\n","parent":{"name":"qr-silk","ext":".tsx"}},{"content":"/* eslint-disable react/jsx-key */\n// tslint:disable-file: match-default-export-name no-submodule-imports\nimport React from \"react\"\nimport { Grid } from \"@material-ui/core\"\nimport { uniqueMap } from \"../../../jacdac-ts/src/jdom/utils\"\nimport serviceProviderDefinitions from \"../../../jacdac-ts/src/servers/servers\"\nimport { hasServiceView } from \"../../components/dashboard/DashboardServiceWidget\"\nimport { serviceSpecificationFromClassIdentifier } from \"../../../jacdac-ts/src/jdom/spec\"\nimport { withPrefix } from \"gatsby-link\"\n\n// run scripts/collecticons.js to refresh\n\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\"\nimport CheckCircleOutlineIcon from \"@material-ui/icons/CheckCircleOutline\"\nimport GetAppIcon from \"@material-ui/icons/GetApp\"\nimport LaunchIcon from \"@material-ui/icons/Launch\"\nimport AddIcon from \"@material-ui/icons/Add\"\nimport ClearIcon from \"@material-ui/icons/Clear\"\nimport DevicesIcon from \"@material-ui/icons/Devices\"\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\"\nimport RemoveIcon from \"@material-ui/icons/Remove\"\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\"\nimport RefreshIcon from \"@material-ui/icons/Refresh\"\nimport CloseIcon from \"@material-ui/icons/Close\"\nimport MicIcon from \"@material-ui/icons/Mic\"\nimport VoiceChatIcon from \"@material-ui/icons/VoiceChat\"\nimport HistoryIcon from \"@material-ui/icons/History\"\nimport MenuIcon from \"@material-ui/icons/Menu\"\nimport AccountTreeIcon from \"@material-ui/icons/AccountTree\"\nimport GitHubIcon from \"@material-ui/icons/GitHub\"\nimport UsbIcon from \"@material-ui/icons/Usb\"\nimport BluetoothIcon from \"@material-ui/icons/Bluetooth\"\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\"\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\"\nimport CreateIcon from \"@material-ui/icons/Create\"\nimport LockIcon from \"@material-ui/icons/Lock\"\nimport CallToActionIcon from \"@material-ui/icons/CallToAction\"\nimport FlashOnIcon from \"@material-ui/icons/FlashOn\"\nimport DataUsageIcon from \"@material-ui/icons/DataUsage\"\nimport ReplyIcon from \"@material-ui/icons/Reply\"\nimport DeviceUnknownIcon from \"@material-ui/icons/DeviceUnknown\"\nimport DeviceHubIcon from \"@material-ui/icons/DeviceHub\"\nimport BubbleChartIcon from \"@material-ui/icons/BubbleChart\"\nimport ComputerIcon from \"@material-ui/icons/Computer\"\nimport BlurLinearIcon from \"@material-ui/icons/BlurLinear\"\nimport ConfirmationNumberIcon from \"@material-ui/icons/ConfirmationNumber\"\nimport NotificationsNoneIcon from \"@material-ui/icons/NotificationsNone\"\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\"\nimport SettingsIcon from \"@material-ui/icons/Settings\"\nimport MoreIcon from \"@material-ui/icons/MoreVert\"\nimport WarningIcon from \"@material-ui/icons/Warning\"\nimport ErrorIcon from \"@material-ui/icons/Error\"\nimport MessageIcon from \"@material-ui/icons/Message\"\nimport NoteIcon from \"@material-ui/icons/Note\"\nimport DeleteIcon from \"@material-ui/icons/Delete\"\nimport SaveIcon from \"@material-ui/icons/Save\"\nimport ArrowLeftIcon from \"@material-ui/icons/ArrowLeft\"\nimport CodeIcon from \"@material-ui/icons/Code\"\nimport FilterListIcon from \"@material-ui/icons/FilterList\"\nimport QueryBuilderIcon from \"@material-ui/icons/QueryBuilder\"\nimport GroupWorkIcon from \"@material-ui/icons/GroupWork\"\nimport CategoryIcon from \"@material-ui/icons/Category\"\nimport ReplayIcon from \"@material-ui/icons/Replay\"\nimport PauseIcon from \"@material-ui/icons/Pause\"\nimport LiveTvIcon from \"@material-ui/icons/LiveTv\"\nimport CheckIcon from \"@material-ui/icons/Check\"\nimport FiberManualRecordIcon from \"@material-ui/icons/FiberManualRecord\"\nimport SearchIcon from \"@material-ui/icons/Search\"\nimport SpeedIcon from \"@material-ui/icons/Speed\"\nimport InfoIcon from \"@material-ui/icons/Info\"\nimport HourglassEmptyIcon from \"@material-ui/icons/HourglassEmpty\"\nimport PlayCircleFilledIcon from \"@material-ui/icons/PlayCircleFilled\"\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\"\nimport SettingsBrightnessIcon from \"@material-ui/icons/SettingsBrightness\"\nimport SystemUpdateAltIcon from \"@material-ui/icons/SystemUpdateAlt\"\nimport WifiIcon from \"@material-ui/icons/Wifi\"\nimport EditIcon from \"@material-ui/icons/Edit\"\nimport JacdacIcon from \"../../components/icons/JacdacIcon\"\nimport MakeCodeIcon from \"../../components/icons/MakeCodeIcon\"\nimport EdgeImpulseIcon from \"../../components/icons/EdgeImpulseIcon\"\nimport JupyterIcon from \"../../components/icons/JupyterIcon\"\nimport HumidityIcon from \"../../components/icons/HumidityIcon\"\nimport TemperatureIcon from \"../../components/icons/TemperatureIcon\"\nimport ForumIcon from \"@material-ui/icons/Forum\"\n\nfunction CustomIconGrid() {\n    const icons = [<JacdacIcon />, <HumidityIcon />, <TemperatureIcon />]\n    return (\n        <Grid container spacing={1}>\n            {icons.map((icon, i) => (\n                <Grid item key={i}>\n                    {icon}\n                </Grid>\n            ))}\n        </Grid>\n    )\n}\n\nfunction MaterialUIIconGrid() {\n    const icons = [\n        <ExpandMoreIcon />,\n        <CheckCircleOutlineIcon />,\n        <GetAppIcon />,\n        <LaunchIcon />,\n        <AddIcon />,\n        <ClearIcon />,\n        <DevicesIcon />,\n        <ExpandLessIcon />,\n        <RemoveIcon />,\n        <PlayArrowIcon />,\n        <RefreshIcon />,\n        <CloseIcon />,\n        <MicIcon />,\n        <VoiceChatIcon />,\n        <HistoryIcon />,\n        <MenuIcon />,\n        <AccountTreeIcon />,\n        <GitHubIcon />,\n        <UsbIcon />,\n        <BluetoothIcon />,\n        <ArrowDropDownIcon />,\n        <ArrowRightIcon />,\n        <CreateIcon />,\n        <LockIcon />,\n        <CallToActionIcon />,\n        <FlashOnIcon />,\n        <DataUsageIcon />,\n        <ReplyIcon />,\n        <DeviceUnknownIcon />,\n        <DeviceHubIcon />,\n        <BubbleChartIcon />,\n        <ComputerIcon />,\n        <BlurLinearIcon />,\n        <ConfirmationNumberIcon />,\n        <NotificationsNoneIcon />,\n        <CheckCircleIcon />,\n        <SettingsIcon />,\n        <MoreIcon />,\n        <WarningIcon />,\n        <ErrorIcon />,\n        <MessageIcon />,\n        <NoteIcon />,\n        <DeleteIcon />,\n        <SaveIcon />,\n        <ArrowLeftIcon />,\n        <CodeIcon />,\n        <FilterListIcon />,\n        <QueryBuilderIcon />,\n        <GroupWorkIcon />,\n        <CategoryIcon />,\n        <ReplayIcon />,\n        <PauseIcon />,\n        <LiveTvIcon />,\n        <CheckIcon />,\n        <FiberManualRecordIcon />,\n        <SearchIcon />,\n        <SpeedIcon />,\n        <InfoIcon />,\n        <HourglassEmptyIcon />,\n        <PlayCircleFilledIcon />,\n        <ChevronRightIcon />,\n        <SettingsBrightnessIcon />,\n        <SystemUpdateAltIcon />,\n        <WifiIcon />,\n        <EditIcon />,\n        <ForumIcon />,\n    ]\n    return (\n        <Grid container spacing={1}>\n            {icons.map((icon, i) => (\n                <Grid item key={i}>\n                    {icon}\n                </Grid>\n            ))}\n        </Grid>\n    )\n}\n\nexport default function ReleaseAssets() {\n    const services = uniqueMap(\n        serviceProviderDefinitions().filter(\n            hd =>\n                hd.serviceClasses.length === 1 &&\n                hasServiceView(hd.serviceClasses[0])\n        ),\n        hd => hd.serviceClasses[0].toString(),\n        h => serviceSpecificationFromClassIdentifier(h.serviceClasses[0])\n    )\n    return (\n        <>\n            <h1>Release Assets</h1>\n            <h2>Icons</h2>\n            <h3>Custom</h3>\n            <CustomIconGrid />\n            <h3>Material UI</h3>\n            <MaterialUIIconGrid />\n            <h3>Service Simulators</h3>\n            <p>These services has a custom simulator.</p>\n            <ul>\n                {services.map((srv, i) => (\n                    <li key={i}>\n                        <a\n                            href={withPrefix(\n                                `/services/${srv.shortId}/playground`\n                            )}\n                            target=\"review\"\n                        >\n                            {srv.name}\n                        </a>\n                    </li>\n                ))}\n            </ul>\n        </>\n    )\n}\n","parent":{"name":"release-assets","ext":".tsx"}},{"content":"import { Link } from \"gatsby-theme-material-ui\"\nimport React from \"react\"\nimport ServiceSpecificationEditor from '../../components/tools/ServiceSpecificationEditor'\n\nexport default function Page() {\n    return <>\n        <h1>Service Specification Editor</h1>\n        <p>\n\n            Read the <Link to=\"/reference/service-specification\">service specifiation</Link> documentation.\nUse the packet console to monitor packets from your devices.\n        </p>\n        <ServiceSpecificationEditor />\n    </>\n}","parent":{"name":"service-editor","ext":".tsx"}},{"content":"import React from \"react\"\nimport { Link } from \"gatsby-theme-material-ui\"\nimport { Grid } from \"@material-ui/core\"\nimport { SRV_SETTINGS } from \"../../../jacdac-ts/src/jdom/constants\"\nimport ConnectAlert from \"../../components/alert/ConnectAlert\"\nimport SettingsCard from \"../../components/SettingsCard\"\nimport useServices from \"../../components/hooks/useServices\"\nimport useServiceProviderFromServiceClass from \"../../components/hooks/useServiceProviderFromServiceClass\"\n\nexport default function Page() {\n    // spin up provider on demand\n    useServiceProviderFromServiceClass(SRV_SETTINGS)\n    const services = useServices({ serviceClass: SRV_SETTINGS })\n\n    return (\n        <>\n            <h1>Device Settings</h1>\n            <p>\n                Configure settings in a{\" \"}\n                <Link to=\"/services/settings/\">settings</Link> service.\n            </p>\n            <ConnectAlert serviceClass={SRV_SETTINGS} />\n            <Grid container spacing={2}>\n                {services.map(service => (\n                    <Grid key={service.id} item xs={12} lg={6}>\n                        <SettingsCard service={service} mutable={true} />\n                    </Grid>\n                ))}\n            </Grid>\n        </>\n    )\n}\n","parent":{"name":"settings","ext":".tsx"}},{"content":"import React from \"react\"\nimport Flash from \"../../components/tools/Flash\"\n\nexport default function Page() {\n    return <>\n        <h1>Firmware Updater</h1>\n        <p>\n        This page allows you to update your Jacdac module with new firmware. Find the latest UF2 firmware file from your manufacturer \nand import it with the button below.\n            \n        </p>\n        <Flash />\n    </>\n}","parent":{"name":"updater","ext":".tsx"}},{"content":"A short trace containing annonce packets.\n\n0\t4b900c00ae430744000000000800000001010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n457\t3e580c00ae430744000000000800000002010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n960\ted1f0c00ae430744000000000800000003010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n1462\tf5d80c00ae430744000000000800000004010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n1960\t269f0c00ae430744000000000800000005010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n2463\t53570c00ae430744000000000800000006010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n2966\t80100c00ae430744000000000800000007010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n3466\t42c90c00ae430744000000000800000008010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n3971\t918e0c00ae430744000000000800000009010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n4472\te4460c00ae43074400000000080000000a010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n4974\t37010c00ae43074400000000080000000b010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n5480\t2fc60c00ae43074400000000080000000c010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n5981\tfc810c00ae43074400000000080000000d010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n6483\t89490c00ae43074400000000080000000e010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n6983\t5a0e0c00ae43074400000000080000000f010000ca1fdc12\tfrom XV60/CONTROL (0): announce; sz=8; Announce services: CONTROL, LOGGER\n7486\t5a0e0c00ae43074400000000080000000f010000ca1fdc12\t ====== from XV60/CONTROL (0): announce; sz=8\n7991\t5a0e0c00ae43074400000000080000000f010000ca1fdc12\t ====== from XV60/CONTROL (0): announce; sz=8\n","parent":{"name":"announce","ext":".txt"}},{"content":"Moving 2 sliders back and forth on the same bus.\n\n0\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n71\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n83\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n152\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n195\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n507\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n578\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n589\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n659\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n703\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n1013\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n1087\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n1169\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n1207\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n1218\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n1520\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n1592\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n1673\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n1715\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n2027\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n2101\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n2109\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n2180\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n2221\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n2534\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n2605\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n2671\t238e0801f1fd2e7a5607122d04010320ff000000\tto slider 2/SLIDER (1): SET[streamsamples]; sz=4; SET stream_samples: 255 (0xff)\n2718\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n2723\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n2739\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n2742\tb0320800f1fd2e7a5607122d04010111a08e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n2840\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n2941\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n3043\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n3048\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n3117\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n3146\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n3196\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n3207\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n3239\t45601400f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n3239\t45601400f1fd2e7a5607122d04010111a08e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n3340\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n3441\tb39a0800f1fd2e7a5607122d04010111708e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.556\n3542\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n3547\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n3624\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n3645\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n3696\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n3707\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n3739\tac4c1400f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n3739\tac4c1400f1fd2e7a5607122d04010111908e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n3843\tb39a0800f1fd2e7a5607122d04010111708e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.556\n3941\tb39a0800f1fd2e7a5607122d04010111708e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.556\n3975\tc30b0401abe827640e45ab7900010410\tto slider 1/SLIDER (1): GET[streaminginterval]; sz=0; GET streaming_interval\n3993\t11e00801abe827640e45ab7904010320ff000000\tto slider 1/SLIDER (1): SET[streamsamples]; sz=4; SET stream_samples: 255 (0xff)\n4004\tff7f0800abe827640e45ab790401041000000000\tfrom slider 1/SLIDER (1): GET[streaminginterval]; sz=4; GET streaming_interval: 0ms\n4022\tc30b0401abe827640e45ab7900010410\tto slider 1/SLIDER (1): GET[streaminginterval]; sz=0; GET streaming_interval\n4034\tc30b0401abe827640e45ab7900010410\tto slider 1/SLIDER (1): GET[streaminginterval]; sz=0; GET streaming_interval\n4046\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n4070\tdcec0800abe827640e45ab790401041064000000\tfrom slider 1/SLIDER (1): GET[streaminginterval]; sz=4; GET streaming_interval: 100ms\n4100\tdcec0800abe827640e45ab790401041064000000\tfrom slider 1/SLIDER (1): GET[streaminginterval]; sz=4; GET streaming_interval: 100ms\n4128\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n4166\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n4201\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n4213\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n4224\tfb700800abe827640e45ab7904010111409b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.606\n4244\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n4259\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n4327\tfb700800abe827640e45ab7904010111409b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.606\n4342\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n4429\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n4490\t14810800f1fd2e7a5607122d04010111608e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.556\n4522\tfb700800abe827640e45ab7904010111409b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.606\n4543\t5ab60800f1fd2e7a5607122d04010111408e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.556\n4569\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n4625\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n4639\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n4706\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n4728\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n4777\tb39a0800f1fd2e7a5607122d04010111708e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.556\n4821\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n4843\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n4924\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n4962\tfe050800f1fd2e7a5607122d04010111808e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n5026\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n5070\t14810800f1fd2e7a5607122d04010111608e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.556\n5130\tfb700800abe827640e45ab7904010111409b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.606\n5148\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n5211\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n5224\tfb700800abe827640e45ab7904010111409b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.606\n5239\t591e0800f1fd2e7a5607122d04010111908e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.557\n5258\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n5265\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n5327\tfb700800abe827640e45ab7904010111409b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.606\n5365\t36330800f1fd2e7a5607122d04010111008b0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.543\n5429\t5c6b0800abe827640e45ab7904010111509b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n5489\td45d0800f1fd2e7a5607122d04010111608a0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.541\n5523\t5fc30800abe827640e45ab7904010111809b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n5540\t83ad0800f1fd2e7a5607122d04010111708f0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.56\n5569\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n5625\t5fc30800abe827640e45ab7904010111809b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n5666\t00330800f1fd2e7a5607122d04010111c0900000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.565\n5713\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n5725\tff1c0800abe827640e45ab790401011140a30000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.638\n5748\t3d710800f1fd2e7a5607122d04010111508a0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.54\n5770\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n5828\tc8070800abe827640e45ab790401011180b60000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.713\n5850\t42630800f1fd2e7a5607122d04010111a0780000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.471\n5871\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n5921\ta79d0800abe827640e45ab790401011140d00000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.813\n5982\t40550800f1fd2e7a5607122d04010111a0640000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.393\n6023\t31420800abe827640e45ab790401011140f30000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.95\n6042\tce560800f1fd2e7a5607122d04010111904c0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.299\n6066\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n6127\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n6156\t0a3c0800f1fd2e7a5607122d04010111002d0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.176\n6214\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n6225\tf72c0800abe827640e45ab790401011150ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n6273\t17970800f1fd2e7a5607122d0401011130100000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.063\n6319\t25750800abe827640e45ab790401011130ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n6331\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n6351\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n6422\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n6461\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n6524\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n6556\t023e0800f1fd2e7a5607122d0401011190000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n6572\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n6628\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n6652\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n6720\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n6746\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n6752\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n6765\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n6824\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n6863\t1d4b0800f1fd2e7a5607122d04010111b00d0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.053\n6927\t92dd0800abe827640e45ab790401011140e70000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.903\n6977\t2f270800f1fd2e7a5607122d04010111702e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.181\n7020\t86300800abe827640e45ab7904010111a0b60000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.713\n7051\t20560800f1fd2e7a5607122d0401011160580000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.345\n7075\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n7123\t523a0800abe827640e45ab7904010111106f0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.434\n7162\ta4050800f1fd2e7a5607122d04010111d0820000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.511\n7226\t103c0800abe827640e45ab7904010111e0350000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.21\n7243\t66820800f1fd2e7a5607122d0401011110a40000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.641\n7261\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n7271\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n7322\t6e510800abe827640e45ab7904010111000a0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.039\n7338\tf2b10800f1fd2e7a5607122d0401011180c60000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.775\n7425\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n7476\t94e80800f1fd2e7a5607122d0401011140de0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.868\n7521\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n7572\t1b750800f1fd2e7a5607122d04010111a0ea0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.917\n7624\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n7637\t36010800f1fd2e7a5607122d0401011180fa0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.979\n7668\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n7724\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n7757\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n7776\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n7780\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n7818\t30500800abe827640e45ab790401011190000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n7850\tc5420800f1fd2e7a5607122d0401011150ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n7920\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n7946\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n8023\tdad40800abe827640e45ab790401011170000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n8086\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n8127\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n8148\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n8179\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n8219\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n8240\t66dd0800f1fd2e7a5607122d0401011150eb0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.919\n8269\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n8275\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n8326\tc39d0800f1fd2e7a5607122d0401011180c90000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.787\n8368\t0f240800abe827640e45ab790401011100060000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.023\n8418\t92b90800abe827640e45ab790401011150240000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.142\n8443\t62830800f1fd2e7a5607122d04010111d0a20000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.636\n8521\td14c0800abe827640e45ab7904010111b05c0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.362\n8539\tf14f0800f1fd2e7a5607122d04010111c0740000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.456\n8584\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n8594\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n8625\t3c0e0800f1fd2e7a5607122d0401011140470000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.278\n8682\td5290800abe827640e45ab790401011160990000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.599\n8717\t1f440800abe827640e45ab790401011120be0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.743\n8731\t7e080800f1fd2e7a5607122d04010111b01d0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.116\n8769\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n8781\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n8822\tc6e80800abe827640e45ab790401011140dc0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.86\n8838\t44e30800f1fd2e7a5607122d0401011130010000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.005\n8924\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n9025\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n9035\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n9087\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n9119\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n9130\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n9142\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n9181\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n9222\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n9273\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n9288\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n9319\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n9332\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n9422\t25750800abe827640e45ab790401011130ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n9465\t023e0800f1fd2e7a5607122d0401011190000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n9523\t88510800f1fd2e7a5607122d04010111a0100000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.065\n9575\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n9596\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n9617\ta1420800abe827640e45ab790401011190e60000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.901\n9681\tc1270800f1fd2e7a5607122d04010111803a0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.229\n9701\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n9727\t93990800abe827640e45ab790401011100a60000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.648\n9748\t863b0800f1fd2e7a5607122d04010111b0680000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.409\n9775\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n9785\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n9817\t15fc0800abe827640e45ab7904010111b0600000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.378\n9878\t1f460800f1fd2e7a5607122d04010111e09d0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.617\n9918\t42530800abe827640e45ab7904010111e02a0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.167\n9950\t66350800f1fd2e7a5607122d0401011140c70000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.778\n10021\t12840800f1fd2e7a5607122d0401011120e50000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.895\n10103\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n10124\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n10168\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n10207\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n10212\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n10217\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n10230\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n10279\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n10290\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n10321\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n10336\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n10423\tb0000800f1fd2e7a5607122d0401011120ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n10489\tdad40800abe827640e45ab790401011170000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n10515\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n10527\t6c010800f1fd2e7a5607122d04010111d0f60000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.964\n10607\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n10700\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n10726\td97c0800abe827640e45ab7904010111a0000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n10782\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n10793\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n10796\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n10815\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n10828\t9c0b0800f1fd2e7a5607122d0401011110220000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.133\n10917\tdad40800abe827640e45ab790401011170000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n10934\t023e0800f1fd2e7a5607122d0401011190000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11019\t023e0800f1fd2e7a5607122d0401011190000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11071\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11111\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n11126\t96ba0800f1fd2e7a5607122d0401011150010000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.005\n11149\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11204\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n11223\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11240\t80530800f1fd2e7a5607122d04010111303d0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.239\n11288\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n11299\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n11310\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n11321\t09470800f1fd2e7a5607122d04010111908d0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.553\n11385\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11423\td19d0800f1fd2e7a5607122d0401011130df0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.872\n11459\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11515\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11526\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n11617\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n11655\td28b1400abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n11655\td28b1400abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11709\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n11741\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n11790\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n11801\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n11822\t0ce10800abe827640e45ab790401011110380000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.219\n11843\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n11914\t6aee0800abe827640e45ab790401011140920000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.571\n11959\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12016\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12040\t48030800abe827640e45ab790401011160d80000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.845\n12119\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12142\tb1441400abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n12142\tb1441400abe827640e45ab790401011180ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.998\n12219\t171b0800f1fd2e7a5607122d0401011130ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12277\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12299\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n12309\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n12320\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12336\t25750800abe827640e45ab790401011130ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12421\t171b0800f1fd2e7a5607122d0401011130ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12442\tff430800abe827640e45ab790401011100ec0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.922\n12513\te1f70800abe827640e45ab7904010111b0b20000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.698\n12561\tc5420800f1fd2e7a5607122d0401011150ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12615\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12636\te2d30800abe827640e45ab7904010111605d0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.365\n12718\t171b0800f1fd2e7a5607122d0401011130ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12753\tdd7d0800abe827640e45ab790401011160060000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.025\n12802\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n12813\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n12854\t7e271400f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n12854\t7e271400f1fd2e7a5607122d0401011170ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.998\n12915\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n12938\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n13018\t171b0800f1fd2e7a5607122d0401011130ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n13058\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n13119\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n13147\t7e670800abe827640e45ab7904010111b0000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.003\n13221\t171b0800f1fd2e7a5607122d0401011130ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n13242\t7e8f0800abe827640e45ab7904010111a02c0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.174\n13271\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n13310\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n13321\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n13326\t45521400f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n13326\t45521400f1fd2e7a5607122d0401011120ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n13413\t792d0800f1fd2e7a5607122d04010111a0f40000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.956\n13452\t3d9b0800abe827640e45ab790401011180850000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.521\n13515\t0cea0800f1fd2e7a5607122d0401011100e60000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.898\n13564\tb5470800abe827640e45ab7904010111609b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.607\n13618\tb2de0800f1fd2e7a5607122d0401011130cf0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.809\n13655\t25c20800abe827640e45ab7904010111609c0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.611\n13719\t46830800f1fd2e7a5607122d04010111a0af0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.686\n13758\tb9ac0800abe827640e45ab7904010111209c0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.61\n13851\t05440800f1fd2e7a5607122d04010111c0a60000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.651\n13872\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n13912\t99af0800f1fd2e7a5607122d0401011150b40000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.704\n13938\t36d90800abe827640e45ab7904010111d0840000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.519\n14013\t0eb10800f1fd2e7a5607122d04010111c0c40000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.769\n14069\tabac0800abe827640e45ab7904010111908a0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.541\n14115\t7e5e0800f1fd2e7a5607122d0401011120af0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.684\n14131\tcb470800abe827640e45ab7904010111409a0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.603\n14153\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n14217\t9e340800f1fd2e7a5607122d04010111c0c30000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.765\n14242\t01470800abe827640e45ab7904010111c0830000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.515\n14281\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n14310\t25f20800f1fd2e7a5607122d0401011120ce0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.805\n14363\t5e5d0800abe827640e45ab790401011150870000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.529\n14384\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n14414\t6aec0800f1fd2e7a5607122d0401011180b10000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.693\n14434\t523a0800abe827640e45ab7904010111106f0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.434\n14517\t9d190800f1fd2e7a5607122d04010111c0d10000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.819\n14608\t8a860800f1fd2e7a5607122d0401011160dd0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.865\n14646\t5ab40800abe827640e45ab790401011180ad0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.678\n14660\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n14711\tfdc00800f1fd2e7a5607122d0401011190b00000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.69\n14730\t625b0800abe827640e45ab790401011180dc0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.861\n14763\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n14814\tfb160800f1fd2e7a5607122d04010111907b0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.483\n14838\tc79e0800abe827640e45ab790401011180ec0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.924\n14868\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n14903\t52550800f1fd2e7a5607122d0401011110720000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.446\n14946\tc4ec0800abe827640e45ab7904010111c0b10000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.694\n15006\t6a690800f1fd2e7a5607122d0401011150a30000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.638\n15033\t5ba60800abe827640e45ab7904010111505e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.368\n15107\tc1ab0800f1fd2e7a5607122d0401011180d50000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.834\n15135\t808b0800abe827640e45ab790401011160430000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.263\n15152\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n15210\t56300800f1fd2e7a5607122d04010111c0b70000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.718\n15254\t26ef0800abe827640e45ab7904010111608e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.556\n15295\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n15303\t72540800f1fd2e7a5607122d04010111a0790000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.475\n15334\t92dd0800abe827640e45ab790401011140e70000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.903\n15367\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n15409\t06880800f1fd2e7a5607122d0401011100650000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.395\n15456\t238e0801f1fd2e7a5607122d04010320ff000000\tto slider 2/SLIDER (1): SET[streamsamples]; sz=4; SET stream_samples: 255 (0xff)\n15491\tc1710800f1fd2e7a5607122d0401011110880000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.531\n15529\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n15585\t01f20800f1fd2e7a5607122d0401011150c30000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.763\n15630\tfc380800abe827640e45ab7904010111904c0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.299\n15657\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n15688\tbceb0800f1fd2e7a5607122d0401011160f80000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.97\n15712\t2fa00800abe827640e45ab7904010111601f0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.123\n15770\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n15781\tb0000800f1fd2e7a5607122d0401011120ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n15820\t957d0800abe827640e45ab7904010111801c0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.111\n15901\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n15913\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n15984\tb0000800f1fd2e7a5607122d0401011120ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n16005\taa8c0800abe827640e45ab7904010111c0080000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.034\n16031\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n16086\t57740800f1fd2e7a5607122d0401011180f60000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.963\n16130\td4640800abe827640e45ab7904010111f0250000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.148\n16159\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n16189\t85400800f1fd2e7a5607122d0401011120c80000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.782\n16217\t05ca0800abe827640e45ab7904010111006a0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.414\n16272\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n16283\t1fc30800f1fd2e7a5607122d04010111308f0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.559\n16330\t63f70800abe827640e45ab7904010111d0b10000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.695\n16379\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n16387\t67900800f1fd2e7a5607122d04010111c0570000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.343\n16413\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n16418\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n16480\td6b80800f1fd2e7a5607122d0401011120360000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.211\n16515\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n16526\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n16583\td23c0800f1fd2e7a5607122d0401011130220000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.134\n16636\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n16665\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n16686\t263e0800f1fd2e7a5607122d04010111e00d0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.054\n16720\t25750800abe827640e45ab790401011130ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n16753\t11e00801abe827640e45ab7904010320ff000000\tto slider 1/SLIDER (1): SET[streamsamples]; sz=4; SET stream_samples: 255 (0xff)\n16794\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n16801\t7f960800f1fd2e7a5607122d0401011160010000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.005\n16833\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n16865\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n16885\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n16915\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n16927\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n16979\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n17029\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n17080\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n17105\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n17132\t991a0800abe827640e45ab7904010111c0f40000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.956\n17174\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n17184\t7f130800f1fd2e7a5607122d04010111b0130000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.077\n17226\td7400800abe827640e45ab790401011120ca0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.79\n17287\ta9910800f1fd2e7a5607122d0401011180480000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.283\n17319\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n17337\t7c6a0800abe827640e45ab7904010111e0900000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.566\n17359\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n17380\t12330800f1fd2e7a5607122d0401011170860000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.525\n17421\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n17426\ta00f0800abe827640e45ab7904010111005a0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.352\n17483\t672e0800f1fd2e7a5607122d0401011140c90000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.786\n17524\t097e0800abe827640e45ab790401011100220000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.133\n17585\tf6dd0800f1fd2e7a5607122d0401011180fe0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.994\n17627\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n17678\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n17706\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n17730\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n17781\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n17801\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n17823\tdad40800abe827640e45ab790401011170000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n17893\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n17926\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n17934\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n17975\tc0580800f1fd2e7a5607122d0401011190f70000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.967\n18026\t497c0800abe827640e45ab790401011170150000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.084\n18077\t4c6d0800f1fd2e7a5607122d04010111a0c30000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.764\n18128\t9ffe0800abe827640e45ab7904010111404e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.306\n18179\t47700800f1fd2e7a5607122d04010111b08d0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.553\n18223\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n18232\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n18283\t46620800f1fd2e7a5607122d04010111607e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.494\n18327\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n18335\tac050800abe827640e45ab7904010111808c0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.549\n18366\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n18377\t9d460800f1fd2e7a5607122d04010111809e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.619\n18429\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n18436\tc3210800abe827640e45ab7904010111c0740000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.456\n18478\t52310800f1fd2e7a5607122d0401011100b10000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.691\n18529\t76b60800abe827640e45ab7904010111608d0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.552\n18584\td5460800f1fd2e7a5607122d0401011160840000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.517\n18622\t13c20800abe827640e45ab7904010111a0870000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.53\n18683\t95ac0800f1fd2e7a5607122d04010111009f0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.621\n18714\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n18725\t26630800abe827640e45ab790401011160610000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.38\n18776\tb3c50800f1fd2e7a5607122d0401011130c10000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.755\n18820\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n18828\td31e0800abe827640e45ab7904010111a0830000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.514\n18859\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n18880\t931e0800f1fd2e7a5607122d0401011110970000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.59\n18921\tda350800abe827640e45ab7904010111b0d10000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.819\n18958\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n18976\t7fc90800f1fd2e7a5607122d04010111204e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.305\n19027\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n19079\t73f80800f1fd2e7a5607122d04010111f0140000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.082\n19130\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n19181\t023e0800f1fd2e7a5607122d0401011190000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n19211\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n19223\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n19274\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n19315\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n19322\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n19326\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n19368\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n19379\t75cf0800f1fd2e7a5607122d04010111300e0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.055\n19430\t099f0800abe827640e45ab7904010111c0f30000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.952\n19460\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n19480\t9e0f0800f1fd2e7a5607122d04010111904f0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.311\n19521\t6cb40800abe827640e45ab790401011140b60000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.712\n19583\ta5f60800f1fd2e7a5607122d04010111c0a00000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.628\n19624\tace40800abe827640e45ab7904010111405d0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.364\n19675\t04000800f1fd2e7a5607122d0401011180e70000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.904\n19709\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n19727\t53130800abe827640e45ab790401011190100000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.065\n19779\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n19820\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n19829\tdad40800abe827640e45ab790401011170000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n19863\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n19872\t7e271400f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n19872\t7e271400f1fd2e7a5607122d0401011170ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.998\n19923\t974b0800abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n19962\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n19980\tecb20800f1fd2e7a5607122d0401011160fb0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.982\n20021\tded50800abe827640e45ab7904010111b0060000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.026\n20072\t1a030800f1fd2e7a5607122d0401011160da0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.853\n20123\t0b480800abe827640e45ab7904010111003e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.242\n20174\ta25f0800f1fd2e7a5607122d04010111d0a60000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.652\n20205\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n20226\t99210800abe827640e45ab790401011190780000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.471\n20277\t66630800f1fd2e7a5607122d04010111d0750000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.46\n20318\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n20336\t0b9b0800abe827640e45ab7904010111409e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.618\n20370\t03311400f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n20370\t03311400f1fd2e7a5607122d0401011100600000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.375\n20399\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n20422\tc7ac0800abe827640e45ab7904010111009d0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.613\n20453\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n20475\t71fc0800f1fd2e7a5607122d0401011170790000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.474\n20526\tf85d0800abe827640e45ab790401011140890000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.536\n20577\t00330800f1fd2e7a5607122d04010111c0900000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.565\n20629\t905c0800abe827640e45ab790401011110980000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.594\n20669\ta6bf0800f1fd2e7a5607122d04010111d0710000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.445\n20710\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n20721\tfa6b0800abe827640e45ab790401011140950000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.583\n20772\t89780800f1fd2e7a5607122d04010111206f0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.434\n20823\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n20838\t04d10800abe827640e45ab790401011100640000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.391\n20875\t68791400f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n20875\t68791400f1fd2e7a5607122d0401011140a00000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.626\n20927\t620d0800abe827640e45ab7904010111106e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.43\n20954\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n20959\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n20971\t0a070800f1fd2e7a5607122d0401011150a10000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.63\n21022\t0f9a0800abe827640e45ab790401011180980000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.596\n21073\te5fd0800f1fd2e7a5607122d04010111606a0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.416\n21125\tc1f60800abe827640e45ab790401011100b90000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.723\n21175\td1110800f1fd2e7a5607122d0401011130300000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.188\n21217\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n21229\t19410800abe827640e45ab790401011160d50000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.833\n21276\tb1120800f1fd2e7a5607122d04010111f00c0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.051\n21320\t9f2d0800abe827640e45ab790401011100ee0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.93\n21352\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n21372\t023e0800f1fd2e7a5607122d0401011190000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n21392\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n21424\t50370800abe827640e45ab790401011140ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n21455\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n21467\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n21472\t023e0800f1fd2e7a5607122d0401011190000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n21528\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n21569\t023e0800f1fd2e7a5607122d0401011190000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n21620\t826e0800abe827640e45ab790401011120ff0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n21671\ta5250800f1fd2e7a5607122d0401011180000000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n21727\tef451400abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n21727\tef451400abe827640e45ab790401011110f50000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.957\n21773\t19a20800f1fd2e7a5607122d0401011160270000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.154\n21825\ta6310800abe827640e45ab790401011110bd0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.739\n21883\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n21888\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n21918\t96620800abe827640e45ab7904010111007f0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.496\n21959\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n21971\t572b0800f1fd2e7a5607122d04010111c0b90000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.726\n21989\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n22023\te1cc0800abe827640e45ab7904010111e03e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.246\n22074\te1420800f1fd2e7a5607122d0401011120f20000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.946\n22125\t2e3e0800abe827640e45ab7904010111b0030000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.014\n22166\t171b0800f1fd2e7a5607122d0401011130ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n22227\td28b1400abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n22227\td28b1400abe827640e45ab790401011180000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n22269\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n22320\tdad40800abe827640e45ab790401011170000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n22352\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n22372\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n22393\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n22424\tdad40800abe827640e45ab790401011170000000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.002\n22464\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n22469\t62590800f1fd2e7a5607122d0401011140ff0000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.997\n22521\t2b240800abe827640e45ab7904010111700b0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.045\n22551\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n22573\ta4b20800f1fd2e7a5607122d0401011180e10000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.881\n22624\t20390800abe827640e45ab790401011160450000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.271\n22665\t01c00800f1fd2e7a5607122d04010111d0b20000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.698\n22727\t7b7f1400abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n22727\t7b7f1400abe827640e45ab7904010111506a0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.415\n22767\ta8ee0800f1fd2e7a5607122d0401011190850000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.522\n22819\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n22850\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n22871\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n22901\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n22923\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n22963\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n22974\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n23026\tb3fc0800abe827640e45ab7904010111a06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.432\n23079\t0ee70800f1fd2e7a5607122d0401011150760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23108\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n23119\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23170\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23222\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23245\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n23272\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23325\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23367\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n23373\t0ee70800f1fd2e7a5607122d0401011150760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23408\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n23418\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23470\ta9fc0800f1fd2e7a5607122d0401011140760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23513\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n23523\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23564\t0ee70800f1fd2e7a5607122d0401011150760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23625\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23666\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n23673\t0d4f0800f1fd2e7a5607122d0401011180760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.463\n23719\tc6be0800abe827640e45ab7904010111d06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23754\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n23777\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23826\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23862\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23894\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n23914\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n23925\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n23966\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n23987\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n24018\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n24069\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n24121\tc6be0800abe827640e45ab7904010111d06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n24144\t3ab70c00eee2af6c34eb8630080000000f0100000904141f\t ====== from acc1/CONTROL (0): announce; sz=8\n24164\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n24224\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n24245\t73020c00abe827640e45ab79080000000f0100004647271f\t ====== from slider 1/CONTROL (0): announce; sz=8\n24268\t0ee70800f1fd2e7a5607122d0401011150760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n24317\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n24368\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462\n24398\t5b2a0c00551cc29c1435c7f0080000000f0100000391fc12\t ====== from servo/CONTROL (0): announce; sz=8\n24419\t3e520c00f1fd2e7a5607122d080000000f0100004647271f\t ====== from slider 2/CONTROL (0): announce; sz=8\n24425\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n24461\t40d00800f1fd2e7a5607122d0401011170760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.463\n24527\t0f6c0c000651f2f9c1c04f00080000000f010000ca1fdc12\t ====== from brain/CONTROL (0): announce; sz=8\n24533\t2f920800abe827640e45ab7904010111e06e0000\tfrom slider 1/SLIDER (1): GET[reading]; sz=4; GET position: 0.433\n24565\te7cb0800f1fd2e7a5607122d0401011160760000\tfrom slider 2/SLIDER (1): GET[reading]; sz=4; GET position: 0.462","parent":{"name":"2-sliders","ext":".txt"}}]}}}